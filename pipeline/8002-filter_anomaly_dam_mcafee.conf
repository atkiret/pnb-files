filter {
    if [syslog_device_mapping] == "anomaly_mcafee_dam"  {     
        if ![event_raw] {
            mutate{
                add_field => {"event_raw" => "%{message}"}
            }
        }
        # May be its a McAfee DAM Event, Still needs to be verified.
        # Strip out the Syslog Headers
        grok {
            match => { "message" => "(<%{INT:}>)*%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:message}" }
            overwrite => [ "message" ]
            add_field => { "event_ts_rx" => "%{@timestamp}" }
            add_field => { "device_rx_from" => "%{host}" }
        }

        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
            timezone => "Asia/Manila"
            target => "event_ts"     
        }

        date {
            match => [ "event_ts_rx", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601" ]
            target => "event_ts_rx"
        }
        if "_grokparsefailure" not in [tags] and [message] =~ "CEF*." {
            
            grok {
                match => { "message" => "CEF:%{NUMBER:cef_version}\|%{WORD:cef_device_vendor}\|%{DATA:cef_device_product}\|%{DATA:cef_device_version}\|%{DATA:cef_sig_id}\|%{DATA:cef_sig_name}\|%{DATA:cef_sig_severity}\|%{GREEDYDATA:message}" }
                overwrite => [ "message" ]
            }
            # Parse the message with field=value formats
            kv {
                # Note: values with spaces are lost (still getting there)
                field_split => " "
                trim_key => "<>\[\], "
                trim_value => "<>\[\],"
                prefix => "xxxxx_dam_"
            }        
            # SQL Extraction
            grok {
                match => {"message" => "%{DATA} cs2\=%{DATA:database.sql} cs2Label=%{GREEDYDATA}"}
            }
            mutate {
                add_field => { "model_name" => "anomaly" } # Set the Model Name                
                add_field => { "model_version" => "0.1.0" } # Set the Model Version  

                rename => { "cef_device_product" => "device_info"}
                copy => {"syslog_hostname" => "device_name"}
                rename => { "cef_device_vendor" => "device_vendor"} 

                add_field => { "event_type" => "database" } # Set the Event Type
                add_field => { "event_subtype" => "%{cef_sig_id}"}

                rename => {"xxxxx_dam_externalId"=> "reference_id"}

                rename => {"xxxxx_dam_shost" => "hostname_src"}                
                
                rename => {"xxxxx_dam_act"=> "action"}
                rename => {"xxxxx_dam_src"=> "src_ip"}
                rename => {"xxxxx_dam_dst" => "dst_ip" }
				 
                #### Tony added:
                rename => {"xxxxx_dam_cs1" => "[database][name]"}
                #This approach is not working, will do alternative approach which may be expensive, but accuracy is important as well.
                #Implementation in "SQL Extraction"
                #rename => {"xxxxx_dam_cs2" => "database.sql"}
                rename => {"database.sql" => "[database][sql]"}
                rename => {"xxxxx_dam_cs3" => "[database][objects_accessed]"}
                rename => {"xxxxx_dam_duser" => "user_dst"}
                rename => {"xxxxx_dam_suser" => "user_src"}
                rename => {"xxxxx_dam_dproc" => "processor_dst"}
                #### end Tony added lines
            }

            

            ruby {
                code => "event.to_hash.keys.each { |k| 
                    if k.start_with?('xxxxx_dam_NXDOMAIN.') 
                        event.remove(k) 
                    end
                    }
                    "
            }
            # Extract Signature ID and Name
            grok {
                match => { "cef_sig_name" => "%{DATA:signature}\; ID\:%{INT:signature_id}"}
            }

            mutate {
                remove_field => [
                    "syslog_device_mapping", 
                    "cef_device_version", "cef_sig_severity", "cef_version",                     
                    "cef_sig_id", "cef_sig_name",
                    "xxxxx_dam_start", "xxxxx_dam_end", "xxxxx_dam_eventId",
                    "xxxxx_dam_nitroUniqueId",
                    "xxxxx_dam_externalId", "xxxxx_dam_duser", "xxxxx_dam_rt",
                    "xxxxx_dam_nitroNormID", "xxxxx_dam_nitroDNS",
                    "xxxxx_dam_deviceTranslatedAddress", "xxxxx_dam_deviceDirection",
                    "xxxxx_dam_nitroWeb_Domain", "xxxxx_dam_nitroTrust",
                    "xxxxx_dam_cs1Label", "xxxxx_dam_cs2", "xxxxx_dam_cs2Label", "xxxxx_dam_cs3Label"
                ]
            }

            mutate { add_tag => ["processed"] }
        }        
    }
}

