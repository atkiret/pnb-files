filter {
  if [type] == "syslog" and "preprocessed" not in [tags] {
    mutate { remove_tag => [ "_grokparsefailure_sysloginput", "_grokparsefailure" ] }
    grok {
      match => { "message" => "<%{POSINT:syslog_pri}>%{SYSLOGTIMESTAMP:syslog_timestamp} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }      
    }

    if "_grokparsefailure" not in [tags] {
      mutate { strip => ["syslog_message"] }
      mutate { copy => { "@timestamp" => "event_ts_rx"} }

      date {
        match => [ "syslog_timestamp", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss", "ISO8601" ]
        timezone => "Etc/UTC"
        target => "event_ts"
      }
      mutate { 
        add_field => { "device_rx_from" => "%{host}" }                      
        add_field => { "device" => "%{host}" }  # its is asssumed syslog message does not have syslog_hostname        

        add_field => { "event_date" => "%{event_ts}" }
        add_field => { "event_raw" => "%{message}" }
        add_field => { "event_msg" => "%{syslog_message}" }                                
      }
 
      # ruby {     
      #     code => "event.set('event_date',event.get('event_ts').time.strftime('%Y-%m-%d'))"     
      # }

      mutate { add_tag => ["preprocessed"] }
    }
  }
}