# Parses Fortinet WAF Logs in KV Format
filter {    
    # This is a Fortinet Event in KV Format
    if [syslog_device_mapping] == "waf_fortinet" and "processed" not in [tags] and [message] =~ ".*date=.*" {        
        if ![event_raw] {
            mutate{
                add_field => {"event_raw" => "%{message}"}
            }
        }
        mutate {
            add_field => { "event_ts_rx" => "%{@timestamp}" }
            add_field => { "device_rx_from" => "%{host}" }
            add_field => { "forwarder" => "%{host}" }     
            remove_tag => ["_grokparsefailure"]
        }
        # Convert Received time to Timestamp format
        date {
            match => [ "event_ts_rx", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601" ]
            timezone => "Etc/UTC"
            target => "event_ts_rx"
        }
        # Remove Priority
        grok {
            match => { "message" => "<%{NUMBER}>%{GREEDYDATA:message}" }
            overwrite => [ "message" ]
        }
        if "_grokparsefailure" not in [tags] {
            kv {
                prefix => "waf_fortinet_"
                transform_key => "lowercase"
                field_split => " "         
                add_field => { "date_time" => "%{waf_fortinet_date} %{waf_fortinet_time}"}
            }
            date {
                match => [ "date_time", "yyyy-MM-dd HH:mm:ss" ]
                timezone => "Asia/Manila"
                target => "event_ts"                
            }
            if [waf_fortinet_type] in ["traffic", "attack"] {            
                if ![model_name]
                {
                    mutate {     
                        add_field => { "model_name" => "proxy" } # Set the Model Name                                        
                    }
                }
                else {
                    mutate {     
                        update => { "model_name" => "proxy" } # Set the Model Name                
                    }
                }
                mutate {     
                    add_field => { "model_version" => "0.1.0" } # Set the Model Version                 
                    
                    add_field => { "device_info" => "FortiWeb"}
                    rename => {"waf_fortinet_device_id" => "device_name"}                    
                    add_field => { "device_vendor" => "Fortinet" } # Set the Model Version  

                    add_field => { "event_type" => "%{waf_fortinet_type}" } # Set the Event Type
                    rename => { "waf_fortinet_subtype" => "event_subtype"} # Event Sub Type

                    rename => { "waf_fortinet_proto" => "l4_proto"} # L4 Protocol
                    rename => { "waf_fortinet_service" => "dst_service_dev"} # Dest Service reported by Device                                
                    rename => { "waf_fortinet_status" => "status"} # Status

                    rename => {"waf_fortinet_src" => "src_ip"}
                    rename => {"waf_fortinet_src_port" => "src_port"}
                    rename => {"waf_fortinet_dst" => "dst_ip"}
                    rename => {"waf_fortinet_dst_port" => "dst_port"}

                    rename => { "waf_fortinet_policy" => "rule_name"}
                    rename => { "waf_fortinet_reason" => "reason"} # Reason

                    add_field => {"proxy_type" => "reverse"}
                    add_field => {"traffic_dir" => "inbound"} #Inbound because it's a Reverse Prox                
                    
                    rename => { "waf_fortinet_action" => "action"}
                    rename => { "waf_fortinet_http_session_id" => "http_session_id"}
                    rename => { "waf_fortinet_signature_id" => "signature_id"}
                    rename => { "waf_fortinet_signature_subclass" => "signature"}
                    rename => { "waf_fortinet_severity_level" => "severity"}
                    rename => { "waf_fortinet_http_request_time" => "http_request_time"}
                    rename => { "waf_fortinet_http_request_time" => "http_request_time"}                
                    rename => { "waf_fortinet_http_response_time" => "http_response_time"}                
                    rename => { "waf_fortinet_http_request_bytes" => "http_request_bytes"}                
                    rename => { "waf_fortinet_http_response_bytes" => "http_response_bytes"}                
                    rename => { "waf_fortinet_http_method" => "http_method"}                
                    rename => { "waf_fortinet_http_url" => "http_url"}                
                    rename => { "waf_fortinet_http_agent" => "http_user_agent"}  
                    rename => { "waf_fortinet_http_version" => "http_version"}                              
                    rename => { "waf_fortinet_http_retcode" => "http_response_code"}                
                    rename => { "waf_fortinet_http_host" => "http_host"}   
                    rename => { "waf_fortinet_assignee" => "policy_assignee"}             
                                    
                    rename => {"waf_fortinet_server_pool_name" => "proxy_pool"}
                    rename => {"waf_fortinet_user_name" => "user_dst"}
                    #rename => {"waf_fortinet_http_refer" => "http_refer"}

                }
                if ![device_name] {
                    mutate {
                        add_field => {"device" => "%{device_name}"}
                    }
                }
                if ![dst_service_dev] {
                    mutate {
                        add_field => { "http_protocol" => "%{dst_service_dev}"}
                    }
                }

                if[waf_fortinet_threat_level]
                {
                    mutate {
                        rename => {"waf_fortinet_threat_level" => "[threat][level]"}
                        rename => {"waf_fortinet_threat_weight" => "[threat][weight]"}
                    }
                }
                if [http_user_agent] {
                    useragent {
                        lru_cache_size => 200
                        source => "http_user_agent"
                        target => "user_browser"
                    }
                }
                # Change Data Types
                mutate {
                    convert => { "dst_port" => "integer" }                    
                    convert => { "src_port" => "integer" }
                    convert => { "http_request_bytes" => "integer" }
                    convert => { "http_response_bytes" => "integer" }
                    convert => { "http_response_time" => "integer" }
                    convert => { "http_response_code" => "integer" }           
                    #convert => { "[threat][weight]" => "float"}     
                }

                mutate {
                    remove_field => [
                    "syslog_device_mapping", "date_time", "severity"
                    #    , "waf_fortinet_dev_id",
                    #    "waf_fortinet_date", "waf_fortinet_time", "waf_fortinet_log_id",
                    #    "waf_fortinet_msg_id", "waf_fortinet_vd", "waf_fortinet_timezone",
                    #    "waf_fortinet_type", "waf_fortinet_pri", 
                    #    "waf_fortinet_msg", "waf_fortinet_history_threat_weight",
                    #    "waf_fortinet_srccountry", "waf_fortinet_content_switch_name",
                    #    "waf_fortinet_false_positive_mitigation", "waf_fortinet_monitor_status"
                    ]
                }
                grok {
                    match => { "message" => "%{DATA}http_refer=\"%{DATA:http_refer}\" http_version=%{GREEDYDATA}"}
                }

                mutate { add_tag => ["processed"] }                            
            }
        }
        ruby {
                    code => "event.to_hash.keys.each { |k| 
                            if k.start_with?('waf_fortinet_') 
                                event.remove(k) 
                            end
                            }
                            "
        }
    }
}