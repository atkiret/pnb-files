filter {
  if [type] == "wineventlog" {
    mutate {
            rename => [ "Message", "message" ]
    }
    date {
      match => ["EventTime", "YYYY-MM-dd HH:mm:ss"]
      remove_field => [ "EventTime" ]
      # Removed Event Time Here      
    }    
  # Create a Temp for Event ID as Event id can come in Multiple Forms
  alter {
    coalesce => [
      "EventID", "%{EventID}", "%{event_id}"
    ]
  }

  mutate {
    convert => { "EventID" => "integer"}
  }


  # Translate common Event ID's
  translate {
    field => "EventID"
    destination => "EventDesc"
    override => true
    fallback => "N/A"
    dictionary_path => "/data/log_collector/config/eventid.yml"
    refresh_interval => "86400"
  }

  # Translate LogonType to LogonTypeDescription
  translate {
    field => "[event_data][LogonType]"
    destination => "[event_data][LogonType_Description]"
    override => true
    fallback => "N/A"
    dictionary_path => "/data/log_collector/config/winevent_logontypes.yml"
    refresh_interval => "86400"
  }

  # Translate Status to StatusCodeDescription
  translate {
    field => "[event_data][Status]"
    destination => "[event_data][Status_Description]"
    override => true
    fallback => "N/A"
    dictionary_path => "/data/log_collector/config/winevent_status_codes.yml"
    refresh_interval => "86400"
  }
    
# For Powershell events, extract the command details and create alert field
#     if [EventID] == 800 {
#     grok {
#        patterns_dir => "/etc/logstash/logstash-options/patterns"
#        match => { "message" => "%{PWRSHELL:scriptname}" }
#        }
#     if [scriptname] {
#        mutate {
#          add_tag => [ "powershell" , "alert_data" ]
#        }
#      }
#    }
    if [PwrShellScript] {
        mutate {
          add_tag => [ "powershell" , "alert_data" ]
          remove_field => [ "Alert" ]
          replace => { "EventDesc" => "%{PatternName}" }
        }
       }
# Extract username from email
    if [TargetUserName] =~ /\@/ {
        grok {
            match => ["TargetUserName", "%{WORD:TargetUserName}"]
            overwrite => ["TargetUserName"]
            }
       }
    if [EventID] == 4634 {
      mutate {
        add_tag => [ "logoff" ]
      }
    }
    if [EventID] == 4624 or [EventID] == 528 or [EventID] == 540 or [EventID] == 552 or [EventID] == 682 or [EventID] == 4648 or [EventID] == 4778 {
      mutate {
        add_tag => [ "logon" , "alert_data" ]
      }
    }
    if [EventID] == 529 or [EventID] == 4625 or [EventID] == 530 or [EventID] == 531 or [EventID] == 532 or [EventID] == 533 or [EventID] == 534 or [EventID] == 535 or [EventID] == 536 or [EventID] == 536 or [EventID] == 537 or [EventID] == 538 or [EventID] == 539 or [EventID] == 4625 or [EventID] == 4771 {
      mutate {
        add_tag => [ "logon_failure", "alert_data" ]
      }
    }
    # Criticl event IDs to monitor
    if [EventID] == 7030 or [EventID] == 4720 or [EventID] == 4722 or [EventID] == 4724 or [EventID] == 4738 or [EventID] == 4732 or [EventID] == 1102 or [EventID] == 1056 or [EventID] == 2003 or [EventID] == 2005 or [EventID] == 8003 or [EventID] == 8004 or [EventID] == 8006 or [EventID] == 8007 {
      mutate {
        add_tag => [ "alert_data" ]
      }
    }
    # Criticl event IDs to monitor
    if [EventID] == 5152 { drop {} }
    if [EventID] == 4688 { drop {} }
    if [EventID] == 4689 { drop {} } # Process Termination:Not needed due to Sysmon
    if [Channel] == "Microsoft-Windows-Known Folders API Service" { drop {} }
    if [EventID] == 3 and [SourceIp] =~ "255$" { drop {} }
    if [EventID] == 3 and [DestinationIp] =~ "255$" { drop {} }
    # Whitelist/Blacklist check
#    if [EventID] == 7045 {
#      translate {
#        field => "ServiceName"
#        destination => "ServiceCheck"
#        dictionary_path => "/usr/local/sof-elk/lib/dictionaries/service_svc2listtype.yaml"
#      }
#    }
    if [EventID] == 7045 and !([ServiceCheck]) {
      mutate {
        add_tag => [ "alert_data","new_service" ]
      }
    }
    if [ServiceCheck] == 'whitelist' {
      mutate {
        remove_field => [ "ServiceCheck" ]
        add_tag => [ "whitelist" ]
      }
    }
    if [ServiceCheck] == 'blacklist' {
      mutate {
        remove_field => [ "ServiceCheck" ]
        add_tag => [ "blacklist" ]
      }
    }
    if [EventID] == 5158 {
      if [Application] == "System" { drop {} }
      if [Application] =~ "\\windows\\system32\\spoolsv\.exe" { drop {} }
      if [Application] =~ "\\windows\\system32\\wbem\\wmiprvse\.exe" { drop {} }
      if [Application] =~ "mcafee" { drop {} }
      if [Application] =~ "carestream" { drop {} }
      if [Application] =~ "Softdent" { drop {} }
    }
    if [ProcessName] == "C:\\Windows\\System32\\wbem\\WmiPrvSE\.exe" and [SubjectUserName] == "SolarwindsHO" { drop {} }
    if [EventID] == 4690 { drop {} }
    if [EventID] == 861 and [AccountName] == "ntp" { drop {} }
    if [EventID] == 5158 and [Application] =~ "\\windows\\system32\\lsass\.exe$" { drop {} }
    if [EventID] == 5158 and [Application] =~ "\\windows\\system32\\svchost\.exe$" { drop {} }
    if [EventID] == 5158 and [Application] =~ "\\windows\\system32\\dfsrs\.exe$" { drop {} }
    if [EventID] == 5447 { drop {} }

    mutate {
      rename => {
        "AccountName" => "user"
        "AccountType" => "account_type"
        "ActivityID" => "activity_id"
        "Category" => "category"
        "ClientAddress" => "client_ip"
        "Channel" => "channel"
        "DCIPAddress" => "domain_controller_ip"
        "DCName" => "domain_controller_name"
        "EventDesc" => "event_description"
        "EventID" => "event_id"
        "EventReceivedTime" => "event_received_time"
        "EventType" => "event_type"
        "GatewayIPAddress" => "gateway_ip"
        "Hostname" => "hostname"
        "IPAddress" => "client_ip"
        "Ipaddress" => "client_ip"
        "IpAddress" => "client_ip"
        "IPPort" => "source_port"
        "OpcodeValue" => "opcode_value"
        "PreAuthType" => "preauthentication_type"
        "PrincipleSAMName" => "user"
        "ProcessID" => "process_id"
        "ProviderGUID" => "providerguid"
        "RecordNumber" => "record_number"
        "RemoteAddress" => "destination_ip"
        "ServiceName" => "service_name"
        "ServiceID" => "service_id"
        "SeverityValue" => "severity_value"
        "SourceAddress" => "client_ip"
        "SourceModuleName" => "source_module_name"
        "SourceModuleType" => "source_module_type"
        "SourceName" => "source_type"
        "SubjectUserName" => "subject_user"
        "TaskName" => "task_name"
        "TargetDomainName" => "target_domain_name"
        "TargetUserName" => "user"
        "ThreadID" => "thread_id"
        "User_ID" => "user"
        "UserId" => "user"
        "username" => "user"
        "WorkstationName" => "asset_name"
      }
    }
    if [MemberName] {
      kv {
        source => "MemberName"
        include_keys => [ "cn" ]
        field_split => ","
        target => "member_name"
        }
    }
    mutate {
      gsub => [
     "message", "\r\n", " ",
     "message", "\n", " ",
     "message", "\t", " " 
     ]
    }
    if [PwrShellScript] {
      kv {
        source => "message"
        include_keys => [ "UserId", "CommandLine"]
        }
    }
    # For any accounts that are service accounts or special accounts add the tag of service_account
    # This example applies the tag to any username that starts with SVC_.  If you use a different
    # standard change this.
    if [user] =~ "^DWM-*" or [user] == "SYSTEM" or [user] == "NETWORK SERVICE" or [user] == "LOCAL SERVICE" or [user] =~ "^SVC_*" {
      mutate {
        add_tag => [ "service_account" ]
      }
    }
    # This looks for events that are typically noisy but may be of use for deep dive investigations
    # A tag of noise is added to quickly filter out noise
    if [event_id] == 7036 or [source_name] == "Desktop Window Manager" or [category] == "Engine Lifecycle" or [category] == "Provider Lifecycle" {
      mutate {
        add_tag => [ "noise" ]
      }
    }
    #Identify machine accounts
    if [user] =~ /\$/ {
      mutate {
        add_tag => [ "machine", "noise" ]
      }
    }    
    # Lower case all field names
#    ruby {
#      code => "
#        event_hash = event.to_hash
#        new_event = {}
#        event_hash.keys.each do |key|
#        new_event[key.downcase] = event[key]
#        end
#        event.instance_variable_set(:@data, new_event)"
#    }
    mutate { add_tag => ["processed"] }         
  }
}
        
