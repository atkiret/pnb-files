filter {
    if [type] == "checkpoint_audit" or [syslog_device_mapping] == "checkpoint_audit" and [message] =~ ".*loc=*." {
        # This is a Checkpoint Event, Atleast to some extent.
        kv {
            prefix => "checkpoint_"
            transform_key => "lowercase"
            field_split => "|"
        }
        if "_grokparsefailure" not in [tags] {
            kv {
                prefix => "origin_sic_"
                transform_key => "lowercase"
                field_split => ","
                source => "checkpoint_origin_sic_name"
            }

            kv {
                prefix => "dst_user_dn_"
                transform_key => "lowercase"
                field_split => ","
                source => "checkpoint_dst_user_dn"
                exclude_keys => ["ou", "dc"]
            }

            grok {
                match => { "origin_sic_o" => "%{WORD:forwarder}..%{GREEDYDATA}" }
            }

            date {
                match => [ "checkpoint_time", "yyyy-MM-dd HH:mm:ss" ]
                timezone => "Etc/UTC"
                target => "event_ts"
            }

            if [checkpoint_log_type] == "audit" or
                [checkpoint_log_type] == "audit(+)system"
            {		                        
		        mutate { add_field => { "model_name" => "audit" }} # Set the Model Name
                mutate { add_field => { "event_type" => "audit" }} # Set the Event Type                
            
                mutate {
                
                add_field => { "model_version" => "0.1.0" } # Set the Model Version 
                add_field => { "device_vendor" => "Check Point" } # Set the Model Version  
                rename => { "checkpoint_product" => "device_info" } # Device Model / Type
                rename => { "origin_sic_cn" => "device_name" } # Device
                copy => {"forwarder" => "device_rx_from" } # Device from which this event is received.
                
                rename => { "checkpoint_action" => "action" } # Action
                rename => { "checkpoint_orig" => "device" } # Device
                rename => { "checkpoint_i/f_dir" => "iface_dir" } # Dir      
                rename => { "checkpoint_i/f_name" => "iface_name" } # Interface In
                rename => { "checkpoint_log_type" => "audit_type" } # Audit Type
                rename => { "checkpoint_operation" => "operation" } # operation
                rename => { "checkpoint_administrator" => "user_src" } # Admin User
                rename => { "checkpoint_machine" => "dst_host" } # Dst IP (May be the device)
                rename => { "checkpoint_subject" => "operation_type" } # Dst IP (May be the device)
                rename => { "checkpoint_audit status" => "audit_status" } # (Audit Status=Success / Failure)

                rename => { "checkpoint_additional info" => "audit_additional_info" }
                rename => { "checkpoint_log_sys_message" => "audit_sys_message" }
                rename => { "checkpoint_client_ip" => "src_host" } # Source IP   

                rename => { "checkpoint_sessionname" => "audit_session_name"}
                rename => { "checkpoint_session name" => "audit_session_name"}
                rename => { "checkpoint_session description" => "audit_session_description"}
                rename => { "checkpoint_sessiondescription" => "audit_session_description"}

                rename => { "checkpoint_objecttype" => "audit_object_type"}

                rename => { "checkpoint_fieldschanges" => "audit_object_field_changes"}
                rename => { "checkpoint_domain name" => "audit_domain_name"}
                rename => { "checkpoint_objectname" => "audit_object_name"}
                rename => { "checkpoint_advanced changes" => "audit_object_field_other_changes"}
                rename => { "checkpoint_logic changes" => "audit_object_field_changes"}

                rename => { "message" => "event_raw" } # Raw Message                                                     
            }

            

            mutate {                
                remove_field => ["command","checkpoint_parent_rule", "checkpoint_match_table.match_id", "checkpoint_layer_uuid", "checkpoint_inzone", 
                "checkpoint_time", "checkpoint_origin_sic_name", "checkpoint_match_table.rule_action", "checkpoint_layer_name",
                "checkpoint_rule_uid", "checkpoint_match_table.layer_uuid", "checkpoint_rule_action", "host",
                "checkpoint_is_first_for_luuid", "checkpoint_log_type", "checkpoint_match_table.layer_name",
                "checkpoint_match_table.rule_uid", "checkpoint_has_accounting", "checkpoint_outzone", "checkpoint_reason",
                "checkpoint_match_table.parent_rule", "checkpoint_logid", "checkpoint___policy_id_tag", "checkpoint_match_table.rule_name",
                "checkpoint_loc", "checkpoint_uuid", "checkpoint_log_sequence_num", "checkpoint_log_version",
                "headers", "origin_sic_o", "checkpoint___nsons", "checkpoint___pos",
                "checkpoint_elapsed", "checkpoint_client_outbound_packets", "checkpoint_client_inbound_packets",
                "checkpoint_client_inbound_bytes", "checkpoint_client_outbound_bytes", "checkpoint_dst_machine_name", 
                "checkpoint___p_dport", "checkpoint_lastupdatetime", "checkpoint_context_num",
                "checkpoint_dst_user_name", "checkpoint_src_machine_name", "checkpoint_dst_user_dn",
                "checkpoint_client_inbound_interface",
                "checkpoint_client_outbound_interface", "checkpoint_segment_time", "checkpoint_log_id",
                "checkpoint_tp_match_table.layer_name", "checkpoint_packet_capture_name", 
                "checkpoint_packet_capture_time", "checkpoint_start_time", "checkpoint_src_user_name",
                "checkpoint_user", "checkpoint_dropped_incoming", "checkpoint_dropped_outgoing",
                "checkpoint_dropped_total", "checkpoint_match_fk", "checkpoint_email_control",
                "checkpoint_email_session_id", "checkpoint_from", "checkpoint_information",
                "checkpoint_rule", "checkpoint_sub_policy_name", "checkpoint_sub_policy_uid",
                "checkpoint_icmp", "checkpoint_icmp code", "checkpoint_icmp type",
                "checkpoint_nat_addtnl_rulenum", "checkpoint_nat_rulenum", 
                "checkpoint_needs_browse_time",
                "checkpoint_protocol", "checkpoint_sig_id", "checkpoint_snid", "checkpoint_security_inzone",
                "checkpoint_security_outzone", "checkpoint_sessionuid", "checkpoint_uid",
                "checkpoint_sendtotrackerasadvancedauditlog", "checkpoint_operation number"
                ]

                remove_field => [
                    "checkpoint_tp_match_table.malware_rule_name", "checkpoint_policy_time", "checkpoint_tp_match_table.malware_rule_id",
                    "checkpoint_policy", "checkpoint_tp_match_table.smartdefense profile", "checkpoint_session_id",
                    "checkpoint_confidence level", "checkpoint_severity", "checkpoint_tp_match_table.layer_uuid",
                    "checkpoint_description url", "checkpoint_malware_rule_name", "checkpoint_performance impact",
                    "checkpoint_malware_rule_id", "checkpoint_resource", "checkpoint_smartdefense profile",
                    "checkpoint_protection id", "checkpoint_protection_id", "checkpoint_packet_capture_unique_id", 
                    "checkpoint_sub_policy_uid"

                ]
            }
            mutate { add_tag => ["processed"] }
        }
    }

    #if "processed" not in [tags] {
    #    # Update the Type as Unknown
    #    mutate { update => { "type" => "unknown" } }
    #}
    
}
}