# Filter for Trend Micro Control Manager
filter {    
    if "processed" not in [tags] and [syslog_device_mapping] == "trendmicro_cm" {
        mutate {
            remove_tag => ["_grokparsefailure"]
        }
        if ![event_raw] {
            mutate{
                add_field => {"event_raw" => "%{message}"}
            }
        }
        mutate {
            add_field => { "event_ts_rx" => "%{@timestamp}" }
            add_field => { "device_rx_from" => "%{host}" }
            add_field => { "forwarder" => "%{host}" }
        }
        # Strip out the Syslog Headers
        grok {
            match => { "message" => [
                "(<%{NUMBER:}>)*%{SYSLOGTIMESTAMP:syslog_timestamp} TMCM\:%{DATA:event_type} %{GREEDYDATA:message}",
                "<%{INT}>%{MONTH:mon} %{INT:day} %{YEAR:year} %{TIME:time} %{IPORHOST:device} %{DATA:data_format}\:%{INT:cef_version}\|%{DATA:cef_device_vendor}\|%{DATA:cef_device_product}\|%{DATA:cef_device_version}\|%{DATA:cef_sig_id}\|%{DATA:cef_sig_name}\|%{INT:cef_sig_severity}\|%{GREEDYDATA:message}"
                    ]
                }
            overwrite => [ "message" ]            
        }
        # Classify the Signature Type and SubType
        grok {
            match=>{ "cef_sig_id" => [
                                    "%{DATA:cef_sig_id}\:%{GREEDYDATA:filter_type_id}",
                                    "%{DATA:cef_sig_id}"
                                ]
                    }
            overwrite => ["cef_sig_id"]
        }
        if "_grokparsefailure" not in [tags] {
            #Even if the signature not matches the <sig_id>:<filter_type> format, we can ignore it.
            mutate {
                remove_tag => ["_grokparsefailure"]
            }
        }

        if "_grokparsefailure" not in [tags] {
            # Confirm if the Format / Device / Product matches our expectation
            if [data_format] == "CEF" and [cef_device_vendor] ==  "Trend Micro" and [cef_device_product] == "Control Manager" {
                if [cef_sig_id] == "AV" {
                    grok {
                        match => { 
                            "message" => [
                                "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:hostname_dst} duser=%{DATA:user_dst} act=%{DATA:action} cn1Label=%{DATA} cn1=%{DATA} cn2Label=%{DATA} cn2=%{DATA} cs1Label=%{DATA} cs1=%{DATA} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs5Label=%{DATA} cs5=%{DATA:reason} cs6Label=%{DATA} cs6=%{DATA} cat=%{DATA} dvchost=%{DATA:device_name} cn3Label=%{DATA:cn3Label} cn3=%{DATA:cn3} fname=%{DATA:[threat][infected_file]} shost=%{DATA:hostname_src} suser=%{DATA:user_src} dst=%{DATA:dst_ip} deviceFacility=%{GREEDYDATA}",
                                "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:hostname_dst} act=%{DATA:action} cn1Label=%{DATA} cn1=%{DATA} cn2Label=%{DATA} cn2=%{DATA} cs1Label=%{DATA} cs1=%{DATA} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs4Label=%{DATA} cs4=%{DATA} cs5Label=%{DATA} cs5=%{DATA:reason} cs6Label=%{DATA} cs6=%{DATA} cat=%{DATA} dvchost=%{DATA:device_name} cn3Label=%{DATA:cn3Label} cn3=%{DATA:cn3} fname=%{DATA:[threat][infected_file]} filePath=%{DATA:[threat][infected_file_path]} dst=%{DATA:dst_ip} fileHash=%{DATA:[threat][checksum]} deviceFacility=%{DATA}",
                                "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:hostname_dst} act=%{DATA:action} cn1Label=%{DATA} cn1=%{DATA} cn2Label=%{DATA} cn2=%{DATA} cs1Label=%{DATA} cs1=%{DATA} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs4Label=%{DATA} cs4=%{DATA} cs5Label=%{DATA} cs5=%{DATA:reason} cs6Label=%{DATA} cs6=%{DATA} cat=%{DATA} dvchost=%{DATA:device_name} cn3Label=%{DATA:cn3Label} cn3=%{DATA:cn3} fname=%{DATA:[threat][infected_file]} filePath=%{DATA:[threat][infected_file_path]} dst=%{DATA:dst_ip} deviceFacility=%{DATA}"
                            ]
                        }
                    }                
                    if "_grokparsefailure" not in [tags] {
                        # Extract the Date from rt field
                        date {
                            locale => "en"
                            match => [ "rt", "MMM dd YYYY HH:mm:ss zZ" ]                                                
                            target => "event_ts"   
                        }
                        mutate {
                            add_field => { "model_name" => "malware" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version         
                            add_field => { "event_subtype" => "%{cef_sig_id}" } # Set the Event Sub Type                            
                            rename => { "[cef_device_vendor]" => "[device_vendor]" } # Set the Device Vendor
                            rename => {"[cef_device_product]" => "[device_info]"} # Device Model                        
                            add_field => {"[threat][name]" => "%{cef_sig_name}"} # Threat Name
                            convert => { "event_count" => "integer" }
                        }
                        if [cn3Label] == "CLF_ServerityCode" {
                            mutate {
                                rename => { "cn3" => "severity_id"}                        
                            }
                            translate {
                                field => "severity_id"
                                destination => "severity"
                                fallback => "Unknown"
                                dictionary => {
                                    "0" => "Unknown"
                                    "1" => "Information"
                                    "2" => "Warning"
                                    "3" => "Error"
                                    "4" => "Critical"
                                }                    
                            }
                        }
                        mutate { add_tag => ["processed"] }                         
                    }
                } else if [cef_sig_id] == "Spyware Detected" {
                    grok {
                        match => { 
                            "message" => [                                
                                "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:hostname_dst} cn1Label=%{DATA} cn1=%{DATA} cs1Label=%{DATA:cs1Label} cs1=%{DATA:cs1} cs2Label=%{DATA} cs2=%{DATA} cs5Label=%{DATA} cs5=%{DATA:reason} cs6Label=%{DATA} cs6=%{DATA} cat=%{DATA} dvchost=%{DATA:device_name} fname=%{DATA:[threat][infected_file]} filePath=%{DATA:[threat][infected_file_path]} dst=%{DATA:dst_ip} deviceFacility=%{DATA} fileHash=%{DATA:[threat][checksum]} duser=%{DATA:user_dst} cn2Label=%{DATA} cn2=%{DATA} cn3Label=%{DATA:cn3Label} cn3=%{GREEDYDATA:cn3}"
                            ]
                        }
                    }                
                    if "_grokparsefailure" not in [tags] {
                        # Extract the Date from rt field
                        date {
                            locale => "en"
                            match => [ "rt", "MMM dd YYYY HH:mm:ss zZ" ]                                                
                            target => "event_ts"   
                        }
                        mutate {
                            add_field => { "model_name" => "malware" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version         
                            add_field => { "event_subtype" => "%{cef_sig_id}" } # Set the Event Sub Type                            
                            rename => { "[cef_device_vendor]" => "[device_vendor]" } # Set the Device Vendor
                            rename => {"[cef_device_product]" => "[device_info]"} # Device Model                        
                            #add_field => {"[threat][name]" => "%{cef_sig_name}"} # Threat Name
                            convert => { "event_count" => "integer" }
                        }

                        if [cs1Label] == "VirusName" {
                            mutate {
                                rename => { "cs1" => "[threat][name]"}
                            }
                        }
                        
                        if [cn3Label] == "Security_Threat_Type" {
                            mutate {
                                rename => { "cn3" => "tmp_threat_type"}                        
                            }
                            translate {
                                field => "tmp_threat_type"
                                destination => "[threat][type]"
                                fallback => "Unknown"
                                dictionary => {
                                    "1" => "Trackware"
                                    "2" => "Adware"
                                    "3" => "Cookie"
                                    "4" => "Dialer"
                                    "5" => "Security low"
                                    "6" => "General"
                                    "7" => "Key logger"
                                    "8" => "Trojan"
                                    "9" => "Suspect"
                                    "10" => "Hijack"
                                    "11" => "Parasite"
                                    "12" => "Browser Helper Object (BHO)"
                                    "13" => "LSP"
                                    "15" => "URL shortcut"
                                    "16" => "Peer-to-Peer application"
                                    "17" => "Worm"
                                    "19" => "Downloader"
                                    "20" => "Virus"
                                    "21" => "Eulaware"
                                    "22" => "Variant"
                                    "23" => "Security medium"
                                    "24" => "Security high"
                                    "25" => "Vulnerability Assessment"
                                }                    
                            }
                        }
                        mutate { add_tag => ["processed"] }                         
                    }
                } else if [cef_sig_id] == "MS" {                                        
                    translate {
                        field => "filter_type_id"
                        destination => "event_subtype"
                        fallback => "Unknown"
                        dictionary => {
                            "1" => "Content Filter"
                            "2" => "Attachment Filter"
                            "3" => "Standard Filter"
                            "4" => "Size Filter"
                            "5" => "Disclaimer Mgr"
                            "6" => "Spam Filter"
                            "7" => "Outbreak Prevention Policy"
                            "8" => "Import Filter"
                            "9" => "Phishing Filter"
                            "10" => "URL Reputation Filter"
                        }                    
                    }
                    
                    if [cef_sig_name] == "Caution Banner - Inbound"
                    {
                        
                        grok {
                            match => { 
                                "message" => [
                                    "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:[email][recipients]} duser=%{DATA} act=%{DATA:filter_action_id} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs5Label=%{DATA} cs5=%{DATA:reason_id} cs6Label=%{DATA:cs6Label} cs6=%{DATA:cs6} cat=%{DATA} dvchost=%{DATA:device_name} cn1Label=%{DATA} cn1=%{DATA} fname=%{DATA:[email][attachments]} msg=%{DATA:[email][subject]} shost=%{DATA} suser=%{DATA:[email][sender]} cn2Label=%{DATA} cn2=%{DATA} deviceFacility=%{GREEDYDATA}",
                                    "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:[email][recipients]} duser=%{DATA} act=%{DATA:filter_action_id} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs5Label=%{DATA} cs5=%{DATA:reason_id} cs6Label=%{DATA:cs6Label} cs6=%{DATA:cs6} cat=%{DATA} dvchost=%{DATA:device_name} cn1Label=%{DATA} cn1=%{DATA} fname=%{DATA:[email][attachments]} shost=%{DATA} suser=%{DATA:[email][sender]} cn2Label=%{DATA} cn2=%{DATA} deviceFacility=%{GREEDYDATA}",
                                    "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:[email][recipients]} duser=%{DATA} act=%{DATA:filter_action_id} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs5Label=%{DATA} cs5=%{DATA:reason_id} cs6Label=%{DATA:cs6Label} cs6=%{DATA:cs6} cat=%{DATA} dvchost=%{DATA:device_name} cn1Label=%{DATA} cn1=%{DATA} fname=%{DATA:[email][attachments]} msg=%{DATA:[email][subject]} cn2Label=%{DATA} cn2=%{DATA} deviceFacility=%{GREEDYDATA}"
                                ]
                            }
                        }
                    } else if [cef_sig_name] in ["Blocked Senders - Inbound","Bulk Messages Quarantine & Exemptions","Other PNB Senders - Incoming",
                    "PNBSB DLP - Quarantine Attachment and File types - Outbound","Quick Handoff","Spoofed PNB Email","DLP - Quarantine Attachment and File types - Outbound",
                    "DLP - Quarantine Attachment and File types - Outbound GIF", "Block PNB Senders from Zimbra"] {
                        
                        grok {
                            match => { 
                                "message" => [
                                    "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:[email][recipients]} duser=%{DATA} act=%{DATA:filter_action_id} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA:cs3Label} cs3=%{DATA:cs3} cs5Label=%{DATA} cs5=%{DATA} cs6Label=%{DATA:cs6Label} cs6=%{DATA:cs6} cat=%{DATA} dvchost=%{DATA:device_name} cn1Label=%{DATA} cn1=%{DATA} fname=%{DATA:[email][attachments]}msg=%{DATA:[email][subject]} shost=%{DATA} suser=%{DATA:[email][sender]} cn2Label=%{DATA} cn2=%{DATA} deviceFacility=%{GREEDYDATA}",
                                    "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:[email][recipients]} duser=%{DATA} act=%{DATA:filter_action_id} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA:cs3Label} cs3=%{DATA:cs3} cs5Label=%{DATA} cs5=%{DATA} cs6Label=%{DATA:cs6Label} cs6=%{DATA:cs6} cat=%{DATA} dvchost=%{DATA:device_name} cn1Label=%{DATA} cn1=%{DATA} msg=%{DATA:[email][subject]} shost=%{DATA} suser=%{DATA:[email][sender]} cn2Label=%{DATA} cn2=%{DATA} deviceFacility=%{GREEDYDATA}"
                                ]
                            }
                        }
                    } else if [cef_sig_name] in ["Phishing and High SPAM","SPAM - Medium and Low","Unscannable Attachments - Inbound"] {
                        
                        grok {
                            match => { 
                                "message" => [
                                    "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:[email][recipients]} duser=%{DATA} act=%{DATA:filter_action_id} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs5Label=%{DATA} cs5=%{DATA} cs6Label=%{DATA:cs6Label} cs6=%{DATA:cs6} cat=%{DATA} dvchost=%{DATA:device_name} cn1Label=%{DATA} cn1=%{DATA} fname=%{DATA:[email][attachments]} msg=%{DATA:[email][subject]} shost=%{DATA:[email][sender]} suser=%{DATA} cn2Label=%{DATA} cn2=%{DATA} deviceFacility=%{GREEDYDATA}",
                                    "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:[email][recipients]} duser=%{DATA} act=%{DATA:filter_action_id} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs5Label=%{DATA} cs5=%{DATA} cs6Label=%{DATA:cs6Label} cs6=%{DATA:cs6} cat=%{DATA} dvchost=%{DATA:device_name} cn1Label=%{DATA} cn1=%{DATA} msg=%{DATA:[email][subject]} shost=%{DATA:[email][sender]} suser=%{DATA} cn2Label=%{DATA} cn2=%{DATA} deviceFacility=%{GREEDYDATA}",
                                    "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:[email][recipients]} duser=%{DATA} act=%{DATA:filter_action_id} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs5Label=%{DATA} cs5=%{DATA} cs6Label=%{DATA:cs6Label} cs6=%{DATA:cs6} cat=%{DATA} dvchost=%{DATA:device_name} cn1Label=%{DATA} cn1=%{DATA} msg=%{DATA:[email][subject]} cn2Label=%{DATA} cn2=%{DATA} deviceFacility=%{GREEDYDATA}"                                    
                                ]
                            }
                        }
                    } else if [cef_sig_name] == "Time of Click" {
                        
                        grok {
                            match => { 
                                "message" => [
                                 "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} cnt=%{INT:event_count} dhost=%{DATA:[email][recipients]} duser=%{DATA} act=%{DATA:filter_action_id} cs2Label=%{DATA} cs2=%{DATA} cs3Label=%{DATA} cs3=%{DATA} cs5Label=%{DATA} cs5=%{DATA:reason_id} cs6Label=%{DATA:cs6Label} cs6=%{DATA:cs6} cat=%{DATA} dvchost=%{DATA:device_name} cn1Label=%{DATA} cn1=%{DATA} msg=%{DATA:[email][subject]} shost=%{DATA} suser=%{DATA:[email][sender]} request=%{DATA:[threat][infected_file_path]} cn2Label=%{DATA} cn2=%{DATA} deviceFacility=%{GREEDYDATA}"
                                ]
                            }
                        }
                    } else {
                        mutate {
                            add_tag => ["unsupported"]
                        }
                    }                    
                    if ["_grokparsefailure"] not in [tags] or ["unsupported"] in [tags]{                        
                        # Extract the Date from rt field
                        date {
                            locale => "en"
                            match => [ "rt", "MMM dd YYYY HH:mm:ss zZ" ]                                                
                            target => "event_ts"   
                        }
                        mutate {
                            add_field => { "model_name" => "mail" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version         
                            #add_field => { "event_subtype" => "%{cef_sig_name}" } # Set the Event Sub Type                            
                            rename => { "cef_device_vendor" => "device_vendor" } # Set the Device Vendor
                            rename => {"cef_device_product" => "device_info"} # Device Model
                            #rename => {"cef_sig_id" => "signature_id"} # Threat Name
                            add_field => {"signature" => "%{cef_sig_name}"} # Threat Name
                            convert => { "event_count" => "integer" }
                        }                        
                        # Filter Action Translation
                        translate {
                                field => "filter_action_id"
                                destination => "filter_action"
                                fallback => "Unknown"
                                dictionary => {
                                    "0" => "Unknown"
                                    "1" => "N/A"
                                    "2" => "Clean"
                                    "3" => "Delete"
                                    "4" => "Move"
                                    "5" => "Rename"
                                    "6" => "Pass/Log"
                                    "7" => "Strip"
                                    "8" => "Drop"
                                    "9" => "Quarantine"
                                    "10" => "Insert/Replace"
                                    "11" => "Archive"
                                    "12" => "Stamp"
                                    "13" => "Block"
                                    "14" => "Redirect mail for approval"
                                    "81" => "Encrypt"
                                    "90" => "Detect"
                                    "257" => "Reset"
                                } 
                            }


                        if [cn3Label] == "CLF_ServerityCode" {
                            mutate {
                                rename => { "cn3" => "severity_id"}                            
                            }
                            translate {
                                field => "severity_id"
                                destination => "severity"
                                fallback => "Unknown"
                                dictionary => {
                                    "0" => "Unknown"
                                    "1" => "Information"
                                    "2" => "Warning"
                                    "3" => "Error"
                                    "4" => "Critical"
                                }                    
                            }
                        }
                        #Filter Type
                        # This section is omitted because there's no enough documentation in TrendMicro at this stage
                        # if [cs3Label] == "SL_FilterType" {
                        #     translate {
                        #         field => "cs3"
                        #         destination => "filter_type"
                        #         fallback => "Unknown"
                        #         dictionary => {
                        #             # TODO
                        #         }                    
                        #     }
                        # }    

                        # Message Action Translation
                        if [cs6Label] == "SL_MessageAction" {
                            mutate {
                                rename => { "cs6" => "action_id"}                            
                            }
                            translate {
                                field => "action_id"
                                destination => "action"
                                fallback => "Unknown"
                                dictionary => {                                    
                                    "1" => "N/A"
                                    "2" => "Deliver"
                                    "3" => "Delete"
                                    "4" => "Quarantine"
                                    "5" => "Postpone"
                                    "6" => "Forward"
                                    "7" => "Replace"
                                    "8" => "Archive"
                                    "100" => "Strip"
                                    "101" => "Pass"
                                }                    
                            }
                        }
                        #Convert receipients and attachments to array
                        mutate {
                            split => { "[email][recipients]" => ";" }
                            split => { "[email][attachments]" => ";" }
                        }
                        mutate { add_tag => ["processed"] }                         
                    }
                } else if [cef_sig_id] == "BM" {

                    translate {
                        field => "filter_type_id"
                        destination => "event_subtype"
                        fallback => "Unknown"
                        dictionary => {
                            "0" => "Compromised executable file"
                            "1" => "New startup program"
                            "2" => "Host file modification"
                            "3" => "Program library injection"
                            "4" => "New Internet Explorer plugin"
                            "5" => "Internet Explorer setting modification"
                            "6" => "Shell modification"
                            "7" => "New service"
                            "8" => "Security policy modification"
                            "9" => "Firewall policy modification"
                            "10" => "System file modification"
                            "11" => "Duplicated system file"
                            "13" => "Layered service provider"
                            "14" => "System process modification"
                            "16" => "Suspicious behavior"
                            "100" => "Newly encountered programs"
                            "200" => "Unauthorized file encryption"
                            "1000" => "Threat behavior analysis"
                            "9999" => "User-defined policy"
                        }                    
                    }                    
                    grok {
                        match => { 
                            "message" => [
                                "rt=%{DATA:rt} dvchost=%{DATA:device_name} cn1Label=%{DATA:cn1Label} cn1=%{DATA:cn1} cs2Label=%{DATA} cs2=%{DATA} sproc=%{DATA:[process][src]} cn2Label=%{DATA:cn2Label} cn2=%{DATA:cn2} cs1Label=%{DATA:cs1Label} cs1=%{DATA:cs1} act=%{DATA:action_id} cn3Label=%{DATA:cn3Label} cn3=%{DATA:cn3} shost=%{DATA:hostname_dst} src=%{DATA:src_ip} deviceFacility=%{DATA}"                                
                            ]
                        }
                    }                
                    if "_grokparsefailure" not in [tags] {
                        # Extract the Date from rt field
                        date {
                            locale => "en"
                            match => [ "rt", "MMM dd YYYY HH:mm:ss zZ" ]                                                
                            target => "event_ts"   
                        }
                        mutate {
                            add_field => { "model_name" => "anomaly" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version         
                            add_field => { "event_type" => "%{cef_sig_name}" } # Set the Event Sub Type                            
                            rename => { "cef_device_vendor" => "device_vendor" } # Set the Device Vendor
                            rename => {"cef_device_product" => "device_info"} # Device Model
                            #rename => {"cef_sig_id" => "signature_id"} # Threat Name
                            add_field => {"signature" => "%{cef_sig_name}"} # Threat Name
                        }
                        # Translate Risk Level
                        if [cn1Label] == "Risk_Level" {
                            translate {
                                field => "cn1"
                                destination => "risk"
                                fallback => "Unknown"
                                dictionary => {
                                    "0" => "Low"
                                    "1" => "High"
                                }
                            }
                        }
                        # Translate Event Type
                        if [cn2Label] == "Event_Type" {
                            translate {
                                field => "cn2"
                                destination => "anomaly_type"
                                fallback => "Unknown"
                                dictionary => {
                                    "1" => "Process"
                                    "2" => "Process image"
                                    "4" => "Registry"
                                    "8" => "File system"
                                    "16" => "Driver"
                                    "32" => "SDT"
                                    "64" => "System API"
                                    "128" => "User Mode"
                                    "2048" => "Exploit"
                                    "65535" => "All"
                                }
                            }
                        }
                        #Translate Action
                        translate {
                            field => "action_id"
                            destination => "action"
                            fallback => "Unknown"
                            dictionary => {
                                "0" => "Allow"
                                "1" => "Ask"
                                "2" => "Deny"
                                "3" => "Terminate"
                                "4" => "Read Only"
                                "5" => "Read/Write Only"
                                "6" => "Read/Execute Only"
                                "7" => "Feedback"
                                "8" => "Clean"
                                "1002" => "Unknown"
                                "1003" => "Assess"
                                "1004" => "Terminated. Files were recovered."
                                "1005" => "Terminated. Some files were not recovered."
                                "1006" => "Terminated. Files were not recovered."
                                "1007" => "Terminated. Restart result : Files were recovered."
                                "1008" => "Terminated. Restart result : Some files were not recovered."
                                "1009" => "Terminated. Restart result : Files were not recovered."
                            }
                        }
                        #Fix the Anomaly Target
                        if [cs1Label] == "Target" {
                            mutate {
                                rename => { "cs1" => "[process][dst]"}
                            }
                        }
                        # Operation Lookup
                        if [cn3Label] in ["Operation","TranslatedAegisOperation"] {
                            # Perform lookup for operation_id
                            translate {
                                field => "cn3"
                                destination => "operation"
                                fallback => "Unknown"
                                dictionary => {
                                    "101" => "Create Process"
                                    "102" => "Open"
                                    "103" => "Terminate"
                                    "104" => "Terminate"
                                    "301" => "Delete"
                                    "302" => "Write"
                                    "303" => "Access"
                                    "401" => "Create File"
                                    "402" => "Close"
                                    "403" => "Execute"
                                    "501" => "Invoke"
                                    "601" => "Exploit"
                                    "9999" => "Unhandled Operation"
                                }
                            }
                        }
                        mutate { add_tag => ["processed"] }                         
                    }
                } else if [cef_sig_id] == "WB" {
                    translate {
                        field => "filter_type_id"
                        destination => "event_subtype"
                        fallback => "Unknown"
                        dictionary => {
                            "0" => "Unknown"
                            "1" => "File name"
                            "2" => "Webmail site"
                            "3" => "Web server"
                            "4" => "URL pattern"
                            "5" => "Java/VB script"
                            "6" => "True file type"
                            "7" => "User-defined"
                            "8" => "Server-defined"
                            "9" => "Web policy"
                            "11" => "Phishing"
                            "12" => "Phishing/Spyware/Grayware"
                            "13" => "Phishing/Virus/Malware accomplice"
                            "14" => "Phishing/Forged signature"
                            "15" => "Phishing/Disease vector"
                            "16" => "Phishing/Malicious applet"
                            "17" => "Phishing reputation"
                            "20" => "IP translation policy"
                            "21" => "Java scanning policy"
                            "22" => "Malicious mobile code policy"
                            "31" => "Pharming"
                            "32" => "URL blocking"
                            "33" => "URL filtering"
                            "34" => "Client IP blocking"
                            "35" => "Destination port blocking"
                            "36" => "Web reputation"
                            "41" => "Unsupported file type"
                            "42" => "Exceeds total file count limit"
                            "43" => "Exceeds file size limit"
                            "44" => "Exceeds decompression layer limit"
                            "45" => "Exceeds decompression time frame"
                            "46" => "Exceeds compression ratio limit"
                            "47" => "Password protected file"
                            "48" => "Restricted spyware/grayware type"
                            "60" => "String pattern"
                            "70" => "HTTP inspection"
                            "-1" => "Virus/Malware"
                            "-2" => "Spyware/Grayware"
                            "-3" => "Network virus"
                            "-4" => "IntelliTrap"
                            "-5" => "Suspicious virus/malware"
                            "-6" => "Suspicious spyware/grayware"
                            "-7" => "Fraud"
                            "-8" => "Suspicious behavior"                            
                        }                    
                    }
                    grok {
                        match => { 
                            #duser is flipped to user_src (Source User) because in reality this is the user who triggered this request.
                            "message" => [
                                "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} app=%{DATA:app_id} cnt=%{INT:event_count} dpt=%{DATA:dst_port_tmp} act=%{DATA:action_id} src=%{DATA:src_ip} cs1Label=%{DATA:cs1Label} cs1=%{DATA:cs1} deviceDirection=%{DATA:device_dir_id} cat=%{DATA} dvchost=%{DATA:hostname_src} request=%{DATA:http_url} \(%{DATA}\) duser=%{DATA:user_src} cs2Label=%{DATA:cs2Label} cs2=%{DATA:cs2} cn3Label=%{DATA:cn3Label} cn3=%{DATA:cn3} deviceFacility=%{DATA} cn2Label=%{DATA:cn2Label} cn2=%{GREEDYDATA:cn2}",
                                "deviceExternalId=%{INT:reference_id} rt=%{DATA:rt} app=%{DATA:app_id} cnt=%{INT:event_count} dpt=%{DATA:dst_port_tmp} act=%{DATA:action_id} src=%{DATA:src_ip} cs1Label=%{DATA:cs1Label} cs1=%{DATA:cs1} deviceDirection=%{DATA:device_dir_id} cat=%{DATA} dvchost=%{DATA:hostname_src} request=%{DATA:http_url} duser=%{DATA:user_src} cs2Label=%{DATA:cs2Label} cs2=%{DATA:cs2} cn3Label=%{DATA:cn3Label} cn3=%{DATA:cn3} deviceFacility=%{DATA} cn2Label=%{DATA:cn2Label} cn2=%{GREEDYDATA:cn2}"
                            ]
                        }
                    }
                    if "_grokparsefailure" not in [tags] {
                        # Extract the Date from rt field
                        date {
                            locale => "en"
                            match => [ "rt", "MMM dd YYYY HH:mm:ss zZ" ]                                                
                            target => "event_ts"   
                        }
                        mutate {
                            add_field => { "model_name" => "proxy" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version                                     
                            rename => { "[cef_device_vendor]" => "[device_vendor]" } # Set the Device Vendor
                            rename => {"[cef_device_product]" => "[device_info]"} # Device Model                                                    
                        }
                        # Translate Action
                        translate {
                            field => "action_id"
                            destination => "action"
                            fallback => "Unknown"
                            dictionary => {
                                "0" => "Unknown"
                                "1" => "Pass"
                                "2" => "Block"
                                "3" => "Monitor"
                                "4" => "Delete"
                                "5" => "Quarantine"
                                "6" => "Warn"
                                "7" => "Warn and continue"
                                "8" => "Override"
                            }
                        }
                        # Fix Policy Name
                        # We will not use cs1Label for Policy,
                        # Instead we use cs2Label
                        if [cs2Label] == "Blocking_Rule" {
                            mutate {
                                rename => {"cs2" => "rule_name"}
                            }
                        }                            
                        # Fix deviceDirection
                        translate {
                            field => "device_dir_id"
                            destination => "traffic_dir"
                            fallback => "Unknown"
                            dictionary => {
                                "0" => "None"
                                "1" => "Inbound"
                                "2" => "Outbound"
                            }
                        }                        
                        # Ignoring cat, as this covered in signature header => Refer 'event_subtype'
                        grok {
                            match => {"http_url" => "%{URIPROTO:http_protocol}://(?:%{USER:user_dst}(?::[^@]*)?@)?(?:%{IPORHOST:http_host})(?::%{POSINT:dst_port})?(?:%{URIPATH:http_request_path})?(?:%{URIPARAM:http_request_params})?" }
                        }
                        # Reputation Score
                        if [cn3Label]=="Web_Reputation_Rating" {
                            mutate {
                                rename => {"cn3" => "reputation_score"}
                            }
                        }
                        # Severity Level
                        if [cn2Label] == "SLF_SeverityLevel" {
                            translate {
                                field => "cn2"
                                destination => "severity"
                                fallback => "Unknown"
                                dictionary => {
                                    "100" => "High"
                                    "300" => "Medium high"
                                    "500" => "Medium"
                                    "700" => "Medium low"
                                    "900" => "Low"
                                }
                            }
                        }    
                        if ![dst_port] {
                            mutate {
                                rename => {"dst_port_tmp" => "dst_port"}
                            }
                        }

			if [http_host] {
                            mutate {
                                add_field => {"hostname_dst" => "%{http_host}"}
                            }
                        }

                        # Translate Application
                        translate {                                                        
                            field => "app_id"
                            destination => "application"
                            fallback => "Unknown"
                            dictionary => {                                    
                                "1" => "SMTP"
                                "2" => "POP3"
                                "3" => "IRC"
                                "4" => "DNS Response"
                                "5" => "HTTP"
                                "6" => "FTP"
                                "7" => "TFTP"
                                "8" => "SMB"
                                "9" => "Windows Live Messenger (MSN)"
                                "10" => "AIM"
                                "11" => "Yahoo! Messenger"
                                "12" => "Gmail"
                                "13" => "Yahoo! Mail"
                                "14" => "Windows Live Hotmail"
                                "15" => "RDP"
                                "16" => "DHCP"
                                "17" => "Telnet"
                                "18" => "LDAP"
                                "19" => "File transfer"
                                "20" => "SSH"
                                "21" => "Dameware"
                                "22" => "VNC"
                                "23" => "Cisco Telnet"
                                "24" => "Kerberos"
                                "25" => "DCE RPC"
                                "26" => "SQL"
                                "27" => "pcAnywhere"
                                "28" => "ICMP"
                                "29" => "SNMP"
                                "30" => "Virus pattern TCP"
                                "31" => "Virus pattern UDP"
                                "32" => "HTTPS"
                                "33" => "SMB2"
                                "34" => "MMS"
                                "35" => "IMAP4"
                                "36" => "RADIUS"
                                "37" => "Radmin"
                                "38" => "FTP_Response"
                                "48" => "RTSP/RTP-UDP"
                                "49" => "RTSP/RTP-TCP"
                                "50" => "RTSP/RDT-UDP"
                                "51" => "RTSP/RDT-TCP"
                                "52" => "WMSP"
                                "53" => "SHOUTCast"
                                "54" => "RTMP"
                                "68" => "DNS Request"
                                "256" => "BitTorrent"
                                "257" => "Kazaa"
                                "258" => "Limewire"
                                "259" => "Bearshare"
                                "260" => "Bluester"
                                "261" => "Edonkey emule"
                                "262" => "Edonkey2000"
                                "263" => "Filezilla"
                                "264" => "Guncleus"
                                "265" => "Gnutella"
                                "266" => "Winny"
                                "267" => "Napster"
                                "268" => "Morpheus"
                                "269" => "Napster"
                                "270" => "Shareaza"
                                "271" => "WinMX"
                                "272" => "Mldonkey"
                                "273" => "Direct Connect"
                                "274" => "Soulseek"
                                "275" => "OpenAP"
                                "276" => "Kuro"
                                "277" => "Imesh"
                                "278" => "Skype"
                                "279" => "Google Talk"
                                "317" => "Cabos"
                                "318" => "Zultrax"
                                "319" => "Foxy"
                                "320" => "eDonkey"
                                "321" => "Ares"
                                "322" => "Miranda"
                                "323" => "Kceasy"
                                "324" => "MoodAmp"
                                "325" => "Deepnet Explorer"
                                "326" => "FreeWire"
                                "327" => "Gimme"
                                "328" => "GnucDNA GWebCache"
                                "329" => "Jubster"
                                "330" => "MyNapster"
                                "331" => "Nova GWebCache"
                                "332" => "Swapper GWebCache"
                                "333" => "Xnap"
                                "334" => "Xolox"
                                "335" => "Ppstream"
                                "640" => "AIM Express"
                                "641" => "Chikka SMS Messenger"
                                "642" => "eBuddy"
                                "643" => "ICQ2Go"
                                "644" => "ILoveIM Web Messenger"
                                "645" => "IMUnitive"
                                "646" => "Mabber"
                                "647" => "Meebo"
                                "648" => "Yahoo! Web Messenger"
                                "848" => "SIP2"
                                "1024" => "GPass"
                                "10001" => "IP"
                                "10002" => "ARP"
                                "10003" => "TCP"
                                "10004" => "UDP"
                                "10005" => "IGMP"
                                "60" => "ORACLE"
                                "44" => "MySQL"
                                "520" => "MSSQL"
                                "337" => "Postgres"
                                "41" => "ICMPv6"
                                "10006" => "GGP"
                                "10007" => "PUP"
                                "10008" => "IDP"
                                "10009" => "ND"
                                "10010" => "RAW"
                            }                    
                        }
                        mutate {
                            convert => { "event_count" => "integer" }
                            convert => { "dst_port" => "integer" }
                            convert => { "reputation_score" => "integer" }
                        }                                                                                
                    }
                    mutate { add_tag => ["processed"] }
                }


                mutate {
                    remove_field => [
                        "year", "mon", "day", "data_format", "cef_sig_id", "cef_sig_name", 
                        "rt", "message", "time",
                        "cn1Label", "cn1", "cn2Label", "cn2", "cn3Label", "cn3", "cs1Label", "cs1","cn3Label", 
                        "cs2Label", "cs2", "cs3Label","cs3", "cs6Label", 
                        "cef_device_version", "cef_sig_severity", "cef_version", 
                        "filter_action_id", "filter_type_id",
                        "action_id", "port", "app_id", "tmp_threat_type", "dst_port_tmp"
                    ]
                }
            }
            else {
                if [event_type] == "EVT_SMTP_POP3_CONTENT_FILTERING" {
                    grok {
                        match => { "message" => "Security product=\"%{DATA:device_info}\" Security product node=\"%{DATA:agent_device}\" Security product IP=\"%{DATA:agent_device_ip}\" Event time=\"%{DATA:event_ts_tmp} \(UTC\)\" Email subject=\"%{DATA:email_subject}\" Email sender=\"%{DATA:email_from}\" Email recipient=\"%{DATA:email_to}\" Policy rule=\"%{DATA:rule_name}\" Action on content=\"%{DATA:action_payload}\" Action on email=\"%{DATA:action}\" Domain=\"%{DATA:domain}\" Event time \(local\)=\"%{DATA}\" Infected file=\"%{DATA:threat_infected_file}\"" }                    
                    }
                    if "_grokparsefailure" not in [tags] {
                        # Extract the Date from Syslog TimeStamp
                        date {
                            locale => "en"
                            match => [ "event_ts_tmp", "dd/MM/yyyy HH:mm:ss" ]                        
                            timezone => "Etc/UTC"
                            target => "event_ts"   
                        }
        
                        mutate {
                            add_field => { "model_name" => "mail" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version         
                            add_field => { "event_subtype" => "mail-filter" } # Set the Event Type                            
                            add_field => { "device_vendor" => "Trend Micro" } # Set the Device Vendor                    
                            
                            rename => {"[threat_infected_file]" => "[threat][infected_file]"}

                            split => { "email_to" => ";" }
                        }
                        mutate { add_tag => ["processed"] } 
                    }                           
                } else if [event_type] == "EVT_URL_CONTENT_FILTERING" {
                    grok {
                        #match => { "message" => "Security product=\"%{DATA:device_info}\" Security product node=\"%{DATA:agent_device}\" Security product IP=\"%{DATA:agent_device_ip}\" Event time=\"%{DATA:event_ts_tmp} \(UTC\)\" URL=\"%{DATA:http_url}\" Source IP=\"%{DATA:src_ip}\" Destination IP=\"%{DATA:dst_ip}\" Policy rule=\"%{DATA:rule_name}\" Blocking type=\"%{DATA:blocking_type}\" Domain=\"%{DATA:domain}\" Event time \(local\)=\"%{DATESTAMP}\" Client host name=\"%{DATA:src_hostname}\" Reputation score=\"%{INT:reputation_score}\"" }                    
                        match => {"message" => "Security product=\"%{DATA:device_info}\" Security product node=\"%{DATA:agent_device}\" Security product IP=\"%{DATA:agent_device_ip}\" Event time=\"%{DATA:event_ts_tmp} \(UTC\)\" URL=\"%{DATA:http_url}\" Source IP=\"%{DATA:src_ip}\" Destination IP=\"%{DATA:dst_ip}\" Policy rule=\"%{DATA:rule_name}\" Blocking type=\"%{DATA:blocking_type}\" Domain=\"%{DATA:domain}\" Event time \(local\)=\"%{DATESTAMP}\" Client host name=\"%{DATA:src_hostname}\" Reputation score=\"%{DATA:reputation_score}\""}
                    }
                    if "_grokparsefailure" not in [tags] {
                        # Extract the Date from Syslog TimeStamp
                        date {
                            match => [ "event_ts_tmp", "dd/MM/yyyy HH:mm:ss" ]    
                            timezone => "Etc/UTC"                    
                            target => "event_ts"     
                        }
        
                        mutate {
                            add_field => { "model_name" => "proxy" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version         
                            add_field => { "event_subtype" => "web-filter" } # Set the Event Type                            
                            add_field => { "device_vendor" => "Trend Micro" } # Set the Device Vendor                                            
                        }
                        mutate { add_tag => ["processed"] } 
                    } 
                } else if [event_type] == "SLF_INCIDENT_EVT_CCCA" {
                    grok {
                        match => {"message" => "TMCM server=\"%{IPORHOST:device_name}\" Industry=\"%{INT}\" Security product=\"%{DATA:device_info}\" Security product version=\"%{DATA}\" Security product node=\"%{IPORHOST:agent_device}\" Security product ip=\"%{IP:agent_device_ip}\" Event time=\"%{DATA:event_ts_tmp}\" Security agent name=\"%{DATA:agent_hostname}\" Security agent ip=\"%{DATA:agent_ip}\" Security agent domain=\"%{DATA:agent_domain}\" Policy rule=\"%{DATA:rule_name}\" Action taken=\"%{DATA:action}\" Email sender=\"%{DATA:email_from}\" Email subject=\"%{DATA:email_subject}\" C&C risk level=\"%{INT:risk_level}\" C&C list source=\"%{DATA:list_source}\" C&C channel=\"%{DATA:malware_channel}\" C&C url=\"%{DATA:malware_url}\" C&C url category=\"%{DATA:malware_url_category}\" C&C ip port=\"%{DATA:malware_ip}\:%{INT:malware_port}\" C&C email recipient=\"%{DATA:email_to}\" C&C address first monitored=\"%{DATA:first_seen}\" C&C address last activity=\"%{DATA:last_seen}\" C&C server location=\"%{DATA:malware_server_location}\" Malware families=\"%{DATA:malware_families}\" Targeted attack group=\"%{DATA:targetted_attack_group}\" Event time \(local\)=\"%{DATA}\" Process=\"%{DATA:process}\""}
                    }
                    if "_grokparsefailure" not in [tags] {
                        # Extract the Date from Syslog TimeStamp                    
                        mutate {
                            gsub => [
                                "event_ts_tmp", "Z", ".000Z"                         
                                ]
                        }

                        date {
                            match => [ "event_ts_tmp", "ISO8601", "YYYY-MM-dd'T'HH:mm:ssZ"]                        
                            target => "event_ts"                        
                            tag_on_failure => ["event_ts_failed"]
                        }
        
                        mutate {
                            add_field => { "model_name" => "malware" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version         
                            add_field => { "event_subtype" => "command and control" } # Set the Event Type                            
                            add_field => { "device_vendor" => "Trend Micro" } # Set the Device Vendor
                            

                            rename => {"[email_from]" => "[email][from]"}
                            rename => {"[email_to]" => "[email][to]"}  
                            rename => {"[email_subject]" => "[email][subject]"}                                            
                        }
                        
                        mutate { add_tag => ["processed"] } 
                    }
                } else if [event_type] in [
                    "SLF_INCIDENT_EVT_VIRUS_FOUND_PASS_THRU", 
                    "SLF_INCIDENT_EVT_VIRUS_FOUND_CLEAN_SUCCESS",
                    "SLF_INCIDENT_EVT_VIRUS_FOUND_DELETE_SUCCESS",
                    "SLF_INCIDENT_EVT_VIRUS_FOUND_QUARANTINE_SUCCESS"
                    ]
                    {                
                    grok {
                        match => {"message" => "Security product=\"%{DATA:device_info}\" Security product node=\"%{DATA:agent_device}\" Security product IP=\"%{DATA:agent_device_ip}\" Event time=\"%{DATA:event_ts_tmp} \(UTC\)\" Virus=\"%{DATA:threat_name}\" Infected file=\"%{DATA:threat_infected_file}\" File path=\"%{DATA:threat_infected_file_path}\" Action taken=\"%{DATA:action}\" Result=\"%{DATA:result}\" Infection destination=\"%{DATA:malware_dst}\" Infection destination IP=\"%{DATA:malware_dst_ip}\" Infection source=\"%{DATA:malware_src}\" Infection source IP=\"%{DATA:malware_src_ip}\" Destination IP=\"%{DATA:dst_ip}\" Source IP=\"%{DATA:src_ip}\" Domain=\"%{DATA:domain}\" ScanMethod=\"%{DATA:threat_scanner_method}\" User=\"%{DATA:user_dst}\" Event time \(local\)=\"%{DATESTAMP}\""}                    
                    }
                    if "_grokparsefailure" not in [tags] {
                        # Extract the Date from Syslog TimeStamp                    
                        mutate {
                            gsub => [
                                "event_ts_tmp", "Z", ".000Z"                         
                                ]
                        }
                        date {
                            match => [ "event_ts_tmp", "ISO8601", "YYYY-MM-dd'T'HH:mm:ssZ", "dd/MM/yyyy HH:mm:ss"]                        
                            target => "event_ts"
                            timezone => "Etc/UTC"
                            tag_on_failure => ["event_ts_failed"]
                        }
                        mutate {
                            add_field => { "model_name" => "malware" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version         
                            add_field => { "event_subtype" => "Virus" } # Set the Event Type                            
                            add_field => { "device_vendor" => "Trend Micro" } # Set the Device Vendor

                            rename => {"[threat_name]" => "[threat][name]"}
                            rename => {"[threat_infected_file]" => "[threat][infected_file]"}
                            rename => {"[threat_infected_file_path]" => "[threat][infected_file_path]"}
                            rename => {"[threat_scanner_method]" => "[threat][scan_method]"}
                        }

                        if [forwarder_tmp] and [forwarder_tmp] != "" {
                            mutate {
                                rename => {"[forwarder_tmp]" => "[forwarder]"}
                            }
                        }
                        
                        mutate { add_tag => ["processed"] }                     
                    } else {
                        mutate {
                            add_field => {"grok_failure" => "true"}
                        }
                    }
                }
                else if [event_type] == "SLF_ACTIVITY_EVT_OUTBREAK_ALERT" {
                    # 
                    grok {
                        match => { "message" => "Security product=\"%{DATA:device_info}\" Security product node=\"%{DATA:agent_device}\" Security product IP=\"%{DATA:agent_device_ip}\" Event time=\"%{DATA:event_ts_tmp} \(UTC\)\" Grayware\/Spyware=\"%{DATA:threat_name}\" Infected file=\"%{DATA:threat_infected_file}\" File path=\"%{DATA:threat_infected_file_path}\" Result=\"%{DATA:result}\" Infection destination=\"%{DATA:malware_dst}\" Infection destination IP=\"%{DATA:malware_dst_ip}\" Destination IP=\"%{DATA:dst_ip}\" Source IP=\"%{DATA:src_ip}\" Event time \(local\)=\"%{DATESTAMP}\"" }                    
                    }
                    if "_grokparsefailure" not in [tags] {
                        date {
                            match => [ "event_ts_tmp", "ISO8601", "YYYY-MM-dd'T'HH:mm:ssZ", "dd/MM/yyyy HH:mm:ss"]                        
                            target => "event_ts"
                            timezone => "Etc/UTC"
                            tag_on_failure => ["event_ts_failed"]
                        }
                        mutate {
                            add_field => { "model_name" => "malware" } # Set the Model Name                                                        
                            add_field => { "model_version" => "0.1.0" } # Set the Model Version         
                            add_field => { "event_subtype" => "Grayware/Spyware" } # Set the Event Type                            
                            add_field => { "device_vendor" => "Trend Micro" } # Set the Device Vendor

                            rename => {"[threat_name]" => "[threat][name]"}
                            rename => {"[threat_infected_file]" => "[threat][infected_file]"}
                            rename => {"[threat_infected_file_path]" => "[threat][infected_file_path]"}
                        }

                        if [forwarder_tmp] and [forwarder_tmp] != "" {
                            mutate {
                                rename => {"[forwarder_tmp]" => "[forwarder]"}
                            }
                        }
                        
                        mutate { add_tag => ["processed"] }                     
                    }
                }
            }
            if "processed" in [tags] {
                mutate {
                        remove_field => [                        
                            "syslog_timestamp", "message", "event_ts_tmp"
                        ]
                    }
            }
        } else {
            ruby { code => "puts 'Main Grok Failure'" }
                    
        }
     }
}
