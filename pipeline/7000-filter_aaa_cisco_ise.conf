# Filter for CISCO ISE
filter {
    mutate {
        remove_tag => ["_grokparsefailure"]
    }    
    if "processed" not in [tags] and [syslog_device_mapping] == "cisco_ise" {
        #Extract Syslog Fields
        if ![event_raw] {
            mutate{
                add_field => {"event_raw" => "%{message}"}
            }
        }        
        #Test for CISCO ISE Headers
        grok {
            match => { "message" => "\<%{INT}\>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:device} %{DATA:cat_name} %{GREEDYDATA:message}"}
            overwrite => ["message"]
        }
        if "_grokparsefailure" not in [tags] {
            # We're not still sure if this is CISCO ISE, following conditions may test the hypothesis
            # (or) a mis-configuration
            if [cat_name] in ["CISE_Failed_Attempts", "CISE_Alarm", "CISE_MONITORING_DATA_PURGE_AUDIT"] {                
                grok {
                    match => {
                        "message" => [
                            # CISE_Failed_Attempts
                            "%{INT:msg_id} %{INT:total_seg} %{INT:seg_num} %{TIMESTAMP_ISO8601:event_ts_tmp} %{DATA:event_ts_tz_tmp} %{DATA:sequence_num} %{INT:msg_code} %{WORD:msg_sev} %{DATA:msg_class}: %{DATA:msg_text}, %{GREEDYDATA:kv_message}",
                            # CISE_MONITORING_DATA_PURGE_AUDIT
                            "%{TIMESTAMP_ISO8601:event_ts_tmp} %{DATA:event_ts_tz_tmp} %{INT:msg_id} %{WORD:msg_sev} %{GREEDYDATA:audit_sys_message}",
                            # CISE_Failed_Attempts
                            "%{INT:msg_id} %{INT:total_seg} %{INT:seg_num} %{GREEDYDATA:audit_sys_message}",                            
                            # CISE_Alarm
                            "%{WORD:msg_sev}: %{GREEDYDATA:audit_sys_message}"
                            ]
                        }
                    overwrite => ["message"]
                }
                if "_grokparsefailure" not in [tags] {
                    mutate {
                        gsub => ["message", "(\S+=)", ",\1"]
                    }

                    kv {
                        source => "kv_message"
                        prefix => "cise_"
                        transform_key => "lowercase"        
                        allow_duplicate_values => "true"    
                        remove_char_key => "\s"
                        field_split => ","                                 
                    }   

                    # Generic Syslog Fields
                    mutate {
                        copy => { "@timestamp" => "event_ts_rx" }
                        add_field => { "device_rx_from" => "%{host}" }
                        add_field => { "forwarder" => "%{host}" }     
                        add_field => { "device_vendor" => "Cisco" } # Set the Device Vendor
                        add_field => { "device_info" => "ISE"}                    
                    }
                    # Model Fields
                    mutate {
                        add_field => { "model_name" => "audit" } # Set the Model Name                
                        add_field => { "model_version" => "0.1.0" } # Set the Model Version                              
                        rename => {"sequence_num" => "sequence_id"}                                                                        

                        rename => {"cat_name" => "audit_type"} # CISE Category           
                        rename => {"cise_networkdevicename" => "[nas][device_name]"} # NAS Device Name
                        rename => {"cise_address" => "[nas][device_ip]"}  # Address of the AAA - NAS Device           
                        rename => {"cise_deviceipaddress" => "[nas][device_ip]"}  # Address of the AAA - NAS Device           
                        rename => {"cise_port" => "[nas][port]"} # NAS Port
                        rename => {"cise_deviceport" => "[nas][port]"} # NAS Port

                        rename => {"cise_destinationipaddress" => "dst_ip"}
                        rename => {"cise_destinationport" => "dst_port"}
                        rename => {"cise_protocol" => "dst_service_dev"}

                        rename => {"cise_type" => "operation"}
                        rename => {"cise_acssessionid" => "audit_session_name"}
                        rename => {"cise_cpmsessionid" => "audit_session_id"}
                        rename => {"cise_failurereason" => "audit_sys_message"}
                        rename => {"msg_text" => "audit_session_description"}

                        rename => {"msg_code" => "operation_id"}
                        rename => {"msg_class" => "operation_type"}

                        rename => {"cise_user" => "user_dst"}
                        rename => {"cise_username" => "username_dst"}
                        rename => {"cise_identitygroup" => "usergroup_dst" }
                        rename => {"cise_remote-address" => "src_ip"}
                        ##
                        ## Do something for NetworkDeviceGroups, CPMSessionID, 
                        ##
                        # put rest inside [misc]
                        rename => {"cise_requestlatency" => "[misc][request_latency]"}
                        rename => {"cise_networkdevicegroups" => "[misc][network_device_groups]"}
                        rename => {"cise_location" => "[misc][locations_affected]"}
                        rename => {"cise_profile" => "[misc][profile]"}
                        rename => {"cise_networkdeviceprofile" => "[misc][profile]"}                        

                    }

                    if [event_ts_tmp] and [event_ts_tz_tmp] {    
                        mutate {
                            # Transform to Timestamp Later in this conf.                        
                            add_field => { "date_time" => "%{event_ts_tmp} %{event_ts_tz_tmp}"}
                        }
                    }

                    if [date_time] {
                        # Take Date Time from within the Event
                        # Transform to event_ts
                        date {
                            match => [ "date_time", "yyyy-MM-dd HH:mm:ss.SSS ZZ" ]                         
                            target => "event_ts"                
                        }                                    
                    } else {
                        date {
                            match => ["syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
                            timezone => "Asia/Manila"
                            target => "event_ts"     
                        }
                    }

                    mutate {
                        lowercase => [
                            "dst_service_dev"
                        ]
                        convert => {
                            "[nas][port]" => "integer"
                            "dst_port" => "integer"
                        }
                    }

                    #clean up
                    mutate {
                        remove_field => [
                            "kv_message",
                            "date_time", "event_ts_tmp", "event_ts_tz_tmp",
                            "cise_configversionid", "cise_networkdeviceprofileid", "cise_step",
                            "cise_migrated_ndgs", "seg_num", "total_seg"                        
                        ]
                    }                    
                    mutate { add_tag => ["processed"] }
                }
            }             
            else {
                mutate {
                    remove_field => [
                        "cat_name"
                    ]

                }
            }
            ruby {
                code => "event.to_hash.keys.each { |k| 
                        if k.start_with?('cise_') 
                            event.remove(k) 
                        end
                        }
                        "
            }
        }
    }
}

