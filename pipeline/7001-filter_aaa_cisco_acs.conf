# Filter for CISCO ACS
filter {
    mutate {
        remove_tag => ["_grokparsefailure"]
    }    
    if "processed" not in [tags] and [syslog_device_mapping] == "cisco_acs" {
        #Extract Syslog Fields
        if ![event_raw] {
            mutate{
                add_field => {"event_raw" => "%{message}"}
            }
        }        
        #Test for CISCO ACS Headers
        grok {
            match => { "message" => "\<%{INT}\>%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:device} %{DATA:cat_name} %{GREEDYDATA:message}"}
            overwrite => ["message"]
        }
        if "_grokparsefailure" not in [tags] {
            # We're not still sure if this is CISCO ACS, following conditions may test the hypothesis
            # (or) a mis-configuration
            # We're expecting a big list so keeping it as it is.
            if [cat_name] == "CSCOacs_Administrative_and_Operational_Audit" {                
                grok {
                    match => {
                        "message" => [
                            # CSCOacs_Administrative_and_Operational_Audit
                            "%{INT:msg_id} %{INT:total_seg} %{INT:seg_num} %{TIMESTAMP_ISO8601:event_ts_tmp} %{DATA:event_ts_tz_tmp} %{DATA:sequence_num} %{INT:msg_code} %{WORD:msg_sev} %{DATA:msg_class}: %{DATA:msg_text}, %{GREEDYDATA:kv_message}"
                            ]
                        }                    
                }
                if "_grokparsefailure" not in [tags] {
                    mutate {
                        gsub => ["message", "(\S+=)", ",\1"]
                    }

                    kv {
                        source => "kv_message"
                        prefix => "cacs_"
                        transform_key => "lowercase"        
                        allow_duplicate_values => "true"    
                        remove_char_key => "\s"
                        field_split => ","                                 
                    }   

                    # Generic Syslog Fields
                    mutate {
                        copy => { "@timestamp" => "event_ts_rx" }
                        add_field => { "device_rx_from" => "%{host}" }
                        add_field => { "forwarder" => "%{host}" }    
                        add_field => { "device_vendor" => "Cisco" } # Set the Device Vendor
                        add_field => { "device_info" => "ACS"}                     
                    }
                    # Model Fields
                    mutate {
                        add_field => { "model_name" => "audit" } # Set the Model Name                
                        add_field => { "model_version" => "0.1.0" } # Set the Model Version                              
                        rename => {"sequence_num" => "sequence_id"}                                                                        

                        rename => {"cat_name" => "audit_type"} # CISE Category           
                        
                        rename => {"msg_text" => "audit_session_description"}

                        rename => {"msg_code" => "operation_id"}
                        rename => {"msg_class" => "operation_type"}

                        rename => {"cacs_operationmessagetext" => "audit_sys_message"}
                        rename => {"cacs_adminname" => "user_src"}
                        
                        rename => {"cacs_acsversion" => "[misc][device_version]"}
                        rename => {"cacs_admininterface" => "[misc][shell]"}

                        ##
                        ## Do something for NetworkDeviceGroups, CPMSessionID, 
                        ##
                        # put rest inside [misc]
                        rename => {"cacs_requestlatency" => "[misc][request_latency]"}
                        rename => {"cacs_networkdevicegroups" => "[misc][network_device_groups]"}
                        rename => {"cacs_location" => "[misc][locations_affected]"}
                        rename => {"cacs_profile" => "[misc][profile]"}
                        rename => {"cacs_networkdeviceprofile" => "[misc][profile]"}

                    }

                    if [cacs_failureflag] == "true" {
                        mutate {
                            add_field => {"status" => "failed"}
                        }
                    }

                    if [event_ts_tmp] and [event_ts_tz_tmp] {    
                        mutate {
                            # Transform to Timestamp Later in this conf.                        
                            add_field => { "date_time" => "%{event_ts_tmp} %{event_ts_tz_tmp}"}
                        }
                    }

                    # We're using Syslog Timestamp instead of Event TS because
                    # ACS time is set incorrectly.
                    date {
                        match => ["syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
                        timezone => "Asia/Manila"
                        target => "event_ts"     
                    }
                    


                    #clean up
                    mutate {
                        remove_field => [
                            "kv_message",
                            "date_time", "event_ts_tmp", "event_ts_tz_tmp",
                            "cacs_configversionid", "cacs_networkdeviceprofileid", "cacs_step",
                            "cscs_requestresponsetype",
                            "cacs_migrated_ndgs", "seg_num", "total_seg"                        
                        ]
                    }                    
                    mutate { add_tag => ["processed"] }
                }
            }                         
            
            ruby {
                code => "event.to_hash.keys.each { |k| 
                        if k.start_with?('cacs_') 
                            event.remove(k) 
                        end
                        }
                        "
            }
        }
    }
}
