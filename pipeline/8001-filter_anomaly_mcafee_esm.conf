filter {
    if [syslog_device_mapping] == "anomaly_mcafee_esm"  {     
        if ![event_raw] {
            mutate{
                add_field => {"event_raw" => "%{message}"}
            }
        }
        # May be its a McAfee ESM Event, Still needs to be verified.
        # Strip out the Syslog Headers
        grok {
            match => { "message" => "(<%{INT:}>)*%{TIMESTAMP_ISO8601:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{GREEDYDATA:message}" }
            overwrite => [ "message" ]
            add_field => { "event_ts_rx" => "%{@timestamp}" }
            add_field => { "device_rx_from" => "%{host}" }
        }

        date {
            match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
            timezone => "Etc/UTC"
            target => "event_ts"     
        }

        date {
            match => [ "event_ts_rx", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601" ]
            target => "event_ts_rx"
        }
        if "_grokparsefailure" not in [tags] and [message] =~ "CEF*." {
            
            grok {
                match => { "message" => "CEF:%{NUMBER:cef_version}\|%{WORD:cef_device_vendor}\|%{DATA:cef_device_product}\|%{DATA:cef_device_version}\|%{DATA:cef_sig_id}\|%{DATA:cef_sig_name}\|%{DATA:cef_sig_severity}\|%{GREEDYDATA:message}" }
                overwrite => [ "message" ]
            }
            # Parse the message with field=value formats
            kv {
                # Note: values with spaces are lost (still getting there)
                field_split => " "
                trim_key => "<>\[\], "
                trim_value => "<>\[\],"
                prefix => "anomaly_esm_"
            }        
            mutate {
                add_field => { "model_name" => "anomaly" } # Set the Model Name                
                add_field => { "model_version" => "0.1.0" } # Set the Model Version  

                rename => { "cef_device_product" => "device_info"}
                copy => {"syslog_hostname" => "device_name"}
                rename => { "cef_device_vendor" => "device_vendor"} 

                add_field => { "event_type" => "anomaly" } # Set the Event Type
                add_field => { "event_subtype" => "siem"}

                rename => {"anomaly_esm_shost" => "affected_host"}                
                rename => {"anomaly_esm_deviceExternalId" => "affected_host_reference"}
                rename => {"anomaly_esm_cnt" => "event_count"}
                
                rename => {"anomaly_esm_cat"=> "event_category"}
                rename => {"anomaly_esm_act"=> "action"}
                rename => {"anomaly_esm_proto"=> "proto_l4"}
                rename => {"anomaly_esm_src"=> "src_ip"}
                rename => {"anomaly_esm_dst" => "dst_ip" }
                rename => {"anomaly_esm_nitroAppID" => "event_source"}


                rename => { "cef_sig_id" => "signature_id"}
                rename => { "cef_sig_name" => "signature"}

                
            }
            mutate {
                convert => { "dst_port" => "integer" }       
                convert => { "event_count" => "integer"}             
            }
            ruby {
                code => "event.to_hash.keys.each { |k| 
                        if k.start_with?('anomaly_esm_NXDOMAIN.') 
                            event.remove(k) 
                        end
                        }
                        "
   }
            mutate {
                remove_field => [
                    "syslog_device_mapping", 
                    "cef_device_version", "cef_sig_severity", "cef_version",                     
                    "anomaly_esm_start", "anomaly_esm_end", "anomaly_esm_eventId",
                    "anomaly_esm_nitroUniqueId",
                    "anomaly_esm_externalId", "anomaly_esm_duser", "anomaly_esm_rt",
                    "anomaly_esm_nitroNormID", "anomaly_esm_nitroDNS",
                    "anomaly_esm_deviceTranslatedAddress", "anomaly_esm_deviceDirection",
                    "anomaly_esm_nitroWeb_Domain", "anomaly_esm_nitroTrust"
                ]
            }

            mutate { add_tag => ["processed"] }
        }        
    }
}