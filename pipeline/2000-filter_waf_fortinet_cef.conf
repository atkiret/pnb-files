# Parses Fortinet WAF Logs in KV Format
filter {        
    # This is a Fortinet Event in CEF Format
    if [syslog_device_mapping] == "waf_fortinet" and "processed" not in [tags] and [message] =~ "CEF\:*." {     
        if ![event_raw] {
            mutate{
                add_field => {"event_raw" => "%{message}"}
            }
        }
        
        mutate {
            add_field => { "event_ts_rx" => "%{@timestamp}" }
            add_field => { "device_rx_from" => "%{host}" }
            add_field => { "forwarder" => "%{host}" }     
            remove_tag => ["_grokparsefailure"]
        }

        # Convert Received time to Timestamp format
        date {
            locale => "en"
            match => [ "event_ts_rx", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601" ]
            timezone => "Etc/UTC"
            target => "event_ts_rx"
            tag_on_failure => ["forti_waf_cef_date_parse_issue_ts_rx"]
        }

        grok {
            match => { "message" => "CEF:%{NUMBER:cef_version}\|%{WORD:cef_device_vendor}\|%{DATA:cef_device_product}\|%{DATA:cef_device_version}\|%{DATA:cef_sig_id}\|%{DATA:cef_sig_name}\|%{DATA:cef_sig_severity}\|\r*%{GREEDYDATA:message}" }
            overwrite => [ "message" ]
        }
        if "_grokparsefailure" not in [tags] {
            # Parse the message with field=value formats
            kv {
                # Note: values with spaces are lost (still getting there)      
                #trim_key => "<>\[\], "
                #trim_value => '<>\[\],\" '          
                #field_split_pattern => '\"*\s'
                prefix => "waf_fortinet_"
                #whitespace => "strict"
                include_keys => [
                    "cat","outcome","reason","deviceExternalId","deviceProcessName","proto",
                    "app","src","spt","dst","dpt",
                    "requestMethod","request","requestClientApplication","dhost","in","out","msg",
                    "cn1","cn1Label",
                    "cs1","cs1Label",
                    "cs2","cs2Label",
                    "cs3","cs3Label",
                    "cs4","cs4Label",
                    "cs5","cs5Label",
                    "cs6","cs6Label",
                    "deviceCustomDate1"
                ]
            }

            date {
                locale => "en"
                match => [ "waf_fortinet_deviceCustomDate1", "yyyy-MM-dd-HH:mm:ss" ]
                timezone => "Asia/Manila"
                target => "event_ts"                
                tag_on_failure => ["forti_waf_cef_date_parse_issue_ts"]
            }
            mutate {
                add_field => { "model_name" => "proxy" } # Set the Model Name                
                add_field => { "model_version" => "0.1.0" } # Set the Model Version                 
                
                rename => { "cef_device_product" => "device_info"}
                rename => {"waf_fortinet_deviceExternalId" => "device_name"}
                add_field => {"device" => "%{device_name}"}
                rename => { "cef_device_vendor" => "device_vendor"} # Set the Model Version  
                
                rename => { "waf_fortinet_subtype" => "event_subtype"} # Event Sub Type
                rename => { "waf_fortinet_proto" => "l4_proto"} # L4 Protocol
                rename => { "waf_fortinet_app" => "dst_service_dev"} # Status                                
                rename => { "waf_fortinet_status" => "status"} # Status
                rename => {"waf_fortinet_outcome" => "status"}

                rename => {"waf_fortinet_src" => "src_ip"}
                rename => {"waf_fortinet_spt" => "src_port"}
                rename => {"waf_fortinet_dst" => "dst_ip"}
                rename => {"waf_fortinet_dpt" => "dst_port"}

                rename => { "waf_fortinet_deviceProcessName" => "rule_name"}
                
                rename => { "waf_fortinet_reason" => "reason"} # Reason

                add_field => {"proxy_type" => "reverse"}
                add_field => {"traffic_dir" => "inbound"} #Inbound because it's a Reverse Proxy

                rename => { "waf_fortinet_http_request_time" => "http_request_time"}
                rename => { "waf_fortinet_http_request_time" => "http_request_time"}                
                rename => { "waf_fortinet_http_response_time" => "http_response_time"}                
                rename => { "waf_fortinet_in" => "http_request_bytes"}                
                rename => { "waf_fortinet_out" => "http_response_bytes"}                
                rename => { "waf_fortinet_requestMethod" => "http_method"}                
                rename => { "waf_fortinet_request" => "http_url"}                
                rename => { "waf_fortinet_requestClientApplication" => "http_user_agent"}  
                rename => { "waf_fortinet_http_version" => "http_version"}                                                              
                rename => { "waf_fortinet_dhost" => "http_host"}                
                add_field => { "http_protocol" => "%{dst_service_dev}"}
                rename => {"waf_fortinet_server_pool_name" => "proxy_pool"}
                rename => {"waf_fortinet_user_name" => "user_dst"}
                rename => {"waf_fortinet_http_refer" => "http_refer"}

                rename => { "waf_fortinet_cs2" => "severity_label" }
                rename => { "cef_sig_severity" => "severity_signature" }

                rename => {"waf_fortinet_msg" => "reason"}                
            } 
            if [cn1Label] == "HTTP response code" {
                mutate { rename => { "waf_fortinet_cn1" => "http_response_code"} }
            }

            if [waf_fortinet_cs5Label] == "signature" {
                mutate { rename => {"waf_fortinet_cs5" => "signature"} }
            }

            if [waf_fortinet_cs6Label] == "signature" {
                mutate { rename => {"waf_fortinet_cs6" => "signature_id"} }
            }

            if [http_user_agent] {
                useragent {
                    lru_cache_size => 200
                    source => "http_user_agent"
                    target => "user_browser"
                }
            }
            # Change Data Types
            mutate {
                convert => { "dst_port" => "integer" }                    
                convert => { "src_port" => "integer" }
                convert => { "http_request_bytes" => "integer" }
                convert => { "http_response_bytes" => "integer" }
                convert => { "http_response_time" => "integer" }
                convert => { "http_response_code" => "integer" }  
                gsub => [
                    "cef_sig_name", '"', ""
                ]              
            }
            mutate {
                rename => { "cef_sig_name"=>"event_type" } # Set the Event Type                    
            }

            mutate {
                remove_field => [
                    "cef_sig_name", "waf_fortinet_cs3Label", "waf_fortinet_.cat",
                    "cef_device_product", "waf_fortinet_cn1Label", "cef_device_version",
                    "cef_sig_severity", "cef_sig_id", "waf_fortinet_deviceCustomDate1",
                    "waf_fortinet_cn1", "waf_fortinet_cn1Label",
                    "waf_fortinet_cs1", "waf_fortinet_cs1Label", 
                    "waf_fortinet_cs2", "waf_fortinet_cs2Label",
                    "waf_fortinet_cs3", "waf_fortinet_cs3Label", 
                    "waf_fortinet_cs4", "waf_fortinet_cs4Label",
                    "waf_fortinet_cs5Label", "waf_fortinet_cs6Label"
                    # ,
                    # "date_time", "severity", "waf_fortinet_dev_id",
                    # "waf_fortinet_date", "waf_fortinet_time", "waf_fortinet_log_id",
                    # "waf_fortinet_msg_id", "waf_fortinet_vd", "waf_fortinet_timezone",
                    # "waf_fortinet_type", "waf_fortinet_pri", 
                    # "waf_fortinet_msg",
                    # "waf_fortinet_srccountry", "waf_fortinet_content_switch_name"
                ]
            }
            mutate { add_tag => ["processed"] }            
        
            ruby {
                    code => "event.to_hash.keys.each { |k| 
                            if k.start_with?('waf_fortinet_') 
                                event.remove(k) 
                            end
                            }
                            "
            }
        
        }
    }
}