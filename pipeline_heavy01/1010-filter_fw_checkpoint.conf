filter {
    if [type] == "checkpoint_lea" or [syslog_device_mapping] == "checkpoint_lea" and [message] =~ ".*loc=*." {
        # This is a Checkpoint Event, Atleast to some extent.
        kv {
            prefix => "checkpoint_"
            transform_key => "lowercase"
            field_split => "|"
        }
        if "_grokparsefailure" not in [tags] {
            kv {
                prefix => "origin_sic_"
                transform_key => "lowercase"
                field_split => ","
                source => "checkpoint_origin_sic_name"
            }

            kv {
                prefix => "dst_user_dn_"
                transform_key => "lowercase"
                field_split => ","
                source => "checkpoint_dst_user_dn"
                exclude_keys => ["ou", "dc"]
            }

            grok {
                match => { "origin_sic_o" => "%{WORD:forwarder}..%{GREEDYDATA}" }
            }

            date {
                match => [ "checkpoint_time", "yyyy-MM-dd HH:mm:ss" ]
                timezone => "Etc/UTC"
                target => "event_ts"
            }

            # date {
            #     match => [ "event_ts_rx", "MMM dd yyyy HH:mm:ss", "MMM  d yyyy HH:mm:ss", "ISO8601" ]
            #     target => "event_ts_rx"
            # }
            # ruby {
            #     code => "event.set('event_ts_rx',event.get('@timestamp'))"
            # }

            if [checkpoint_product] =~ ".*FireWall*." {		                        
		        mutate { 
                    add_field => { "model_name" => "firewall" } # Set the Model Name
                    add_field => { "event_type" => "firewall" } # Set the Event Type
                }         
            } else if [checkpoint_product] =~ ".*SmartDefense*." {
                mutate { 
                    add_field => { "model_name" => "intrusion" } # Set the Model Name               
                    add_field => { "event_type" => "intrusion" } # Set the Event Type                              
                    # IDS Fields
                    rename => {"checkpoint_protection type" => "event_subtype"}
                    rename => {"checkpoint_attack" => "signature"}
                    rename => {"checkpoint_protection name" => "signature_info"}
                    rename => {"checkpoint_attack info" => "signature_detail"}
                    rename => {"checkpoint_suppressed logs" => "event_count"}
                    rename => {"checkpoint_received_bytes" => "bytes_in"}
                    rename => {"checkpoint_sent_bytes" => "bytes_out"} 
                    rename => {"checkpoint_industry reference" => "signature_others"}
                    rename => {"checkpoint_rule" => "rule_id"}
                    rename => {"checkpoint_sub_policy_name" => "rule_name"}
                }
            } else if [checkpoint_product] == "URL Filtering" or [checkpoint_product] == "New Anti Virus" and [checkpoint_web_client_type] {
                mutate { 
                    add_field => { "model_name" => "proxy" } # Set the Model Name               
                    add_field => { "event_type" => "web-filter" } # Set the Event Type              
                    add_field => { "event_subtype" => "%{checkpoint_product}" } # Set the Event Sub Type              
                    add_field => {"proxy_type" => "forward"} # Proxy Type
                    add_field => {"traffic_dir" => "outbound"} #Outbound because it's a Forward Proxy    
                    rename => { "checkpoint_primary_application.appi_name" => "http_host" }
                    rename => { "checkpoint_resource_table.resource" => "http_url" }
                }                
            } else if [checkpoint_product] in ["Anti Malware", "New Anti Virus"] and [checkpoint_protection name] {
                # Parsing is based on the KB 
                # https://community.checkpoint.com/t5/Logging-and-Reporting/Threat-Prevention-Log-Field-Documentation/td-p/16553
                mutate {
                    add_field => { "model_name" => "malware" } # Set the Model Name                                                                                     
                    add_field => { "event_type" => "malware" } # Set the Event Type                            
                    rename => {"checkpoint_malware_rule_name" => "rule_name" } # Rule Name
                    rename => {"checkpoint_malware_family" => "[threat][name]"}
                    rename => {"checkpoint_description" => "[threat][description]" }
                    rename => {"checkpoint_malware_action" => "[threat][action]"}
                    rename => {"checkpoint_protection name" => "[threat][protection_name]"}    
                    rename => {"checkpoint_protection type" => "[threat][protection_type]"}
                    rename => {"checkpoint_vendor_list" => "[threat][detection_reference]"}
                }

            } else if [checkpoint_product] in ["Application Control","Application Control(+)URL Filtering"] {
                mutate {
                    add_field => { "model_name" => "proxy" } # Set the Model Name
                    add_field => { "event_subtype" => "%{checkpoint_product}" } # Set the Event Sub Type    
                    add_field => { "proxy_type" => "forward" } # Set the Model Name
                    rename => { "checkpoint_appi_name" => "application"} # Application
                    rename => {"checkpoint_resource" => "http_url"}                    
                }                
            }            
            else if [checkpoint_log_type] == "connection(+)account" {
                mutate { 
                    add_field => { "model_name" => "firewall" } # Set the Model Name
                    add_field => { "event_type" => "%{checkpoint_log_type}" } # Set the Event Type
                }
            }            
            else {
                mutate { add_field => { "model_name" => "unknown" }} # Set the Model Name                
            }       
            # Following are common transformation across all Checkpoint Product Types.     
            mutate {                
                add_field => { "model_version" => "0.1.0" } # Set the Model Version 
                add_field => { "device_vendor" => "Check Point" } # Set the Device Vendor
                rename => { "checkpoint_product" => "device_info" } # Device Model / Type
                
                rename => { "checkpoint_match_id" => "rule_id" } # Rule ID
                rename => { "checkpoint_rule_name" => "rule_name" } # Rule Name
                rename => { "checkpoint_i/f_name" => "iface_name" } # Interface Name
                #copy => { "iface_in" => "iface_out" } # Interface In
                rename => { "checkpoint_action" => "action" } # Action    
                rename => { "checkpoint_src" => "src_ip" } # Source IP            
                rename => { "message" => "event_raw" } # Raw Message            
                rename => { "checkpoint_service_id" => "dst_service_dev" } # Service
                rename => { "checkpoint_i/f_dir" => "iface_dir" } # Dir            
                rename => { "checkpoint_service" => "dst_port" } # Destination Port
                rename => { "checkpoint_dst" => "dst_ip" } # Destination IP
                rename => { "checkpoint_proto" => "proto_l4" } # L4 Protocol

                rename => { "checkpoint_orig" => "device" } # Device
                rename => { "origin_sic_cn" => "device_name" } # Device
                copy => {"forwarder" => "device_rx_from" } # Device from which this event is received.
                rename => { "checkpoint_s_port" => "src_port" } # Source Port
                rename => { "checkpoint_message_info" => "anamoly"} # Like Signature
                rename => { "checkpoint_alert" => "alert"} # FW Alert
                rename => {"checkpoint_action_reason" => "reason"} 
                rename => {"checkpoint_reason" => "reason"} 
                
                rename => { "checkpoint_server_outbound_packets" => "packets_out" } 
                rename => { "checkpoint_server_inbound_packets" => "packets_in" } 
                rename => { "checkpoint_packets" => "packets_total" } 
                rename => { "checkpoint_server_inbound_bytes" => "bytes_in" } 
                rename => { "checkpoint_server_outbound_bytes" => "bytes_out" } 
                rename => { "checkpoint_bytes" => "bytes_total" } 

                rename => { "checkpoint_server_inbound_interface" => "iface_in" } 
                rename => { "checkpoint_server_outbound_interface" => "iface_out" }

                rename => { "dst_user_dn_cn" => "user_dst"}       

                rename => { "checkpoint_xlatesrc" => "src_ip"}                
                rename => { "checkpoint_xlatedst" => "dst_ip"}                                 

                rename => { "checkpoint_inzone" => "[security_zone][in]"}
                rename => { "checkpoint_outzone" => "[security_zone][out]"}

                rename => { "checkpoint_security_inzone" => "[security_zone][in]" }
                rename => { "checkpoint_security_outzone" => "[security_zone][out]"}
                rename => { "checkpoint_connection_count" => "connection_count"}                

                # URL Filter specific Fields
                rename => { "checkpoint_method" => "http_method" }                
                rename => { "checkpoint_matched_category" => "category"}
                rename => { "checkpoint_web_client_type" => "http_user_agent"}
                rename => {"checkpoint_aggregated_log_count" => "event_count"}
                       
                rename => { "checkpoint_precise_error" => "additional_info"}                       
            }

            grok {
                match => {"http_url" => "%{URIPROTO:http_protocol}://(?:%{USER:user_dst}(?::[^@]*)?@)?(?:%{IPORHOST:http_host})(?::%{POSINT:dst_port})?(?:%{URIPATH:http_request_path})?(?:%{URIPARAM:http_request_params})?" }
            }
            if [http_host] {
                mutate {
                    copy => {"http_host" => "hostname_dst"}
                }
            }

            if [http_user_agent] {
                useragent {
                    lru_cache_size => 200
                    source => "http_user_agent"
                    target => "user_browser"
                }
            }

            if ![src_port] {
                mutate{
                    rename => { "checkpoint_xlatesport" => "src_port"}
                }
            }

            if ![dst_port] {
                mutate {
                    rename => { "checkpoint_xlatedport" => "dst_port"}             
                }
            }

            mutate {
                convert => { "event_count" => "integer" }
                convert => { "connection_count" => "integer" }
                convert => { "dst_port" => "integer" }                    
                convert => { "src_port" => "integer" }
                convert => { "packets_out" => "integer" }                    
                convert => { "packets_in" => "integer" }
                convert => { "packets_total" => "integer" }                    
                convert => { "bytes_in" => "integer" }
                convert => { "bytes_out" => "integer" }                    
                convert => { "bytes_total" => "integer" }  
            }

            date {
                    match => [ "checkpoint_creation_time", "dMMMYYYY  H:mm:ss", "ddMMMYYYY HH:mm:ss" ]
                    timezone => "Etc/UTC"
                    target => "first_seen_ts"
            }

            date {
                    match => [ "checkpoint_last_hit_time", "dMMMYYYY  H:mm:ss", "ddMMMYYYY HH:mm:ss" ]
                    timezone => "Etc/UTC"
                    target => "last_seen_ts"
            }
            #!!! Need to convert duration in 'checkpoint_duration'
            if [checkpoint_duration] {
                grok {
                    match => { "checkpoint_duration" => "%{INT:chk_dur_hr}\:%{INT:chk_dur_mn}\:%{INT:chk_dur_sec}" }                    
                }
                mutate {
                    convert => { "chk_dur_hr" => "integer" }
                    convert => { "chk_dur_mn" => "integer" }
                    convert => { "chk_dur_sec" => "integer" }
                }
                ruby {
                    id => "ruby_chkpoint_time_dur"
                    code => "                        
                            event.set('duration_ms', 
                                (event.get('chk_dur_sec') * 1000 +
                                event.get('chk_dur_mn') * 60 * 1000 + 
                                event.get('chk_dur_hr') * 60 * 60 * 1000)
                            )
                        "
                }                
            }


            if [packets_in] and [packets_out] {
                ruby {
                    code => "event.set('packets_total', event.get('packets_in') + event.get('packets_out'))"
                }
            }

            if [bytes_in] and [bytes_out] {            
                ruby {
                    code => "event.set('bytes_total', event.get('bytes_in') + event.get('bytes_out'))"
                }
            }

            mutate {
                remove_field => ["command"]
            }

            mutate { add_tag => ["processed"] }
        }
        ruby {
                id => "ruby_chkpoint_remove_unused"
                code => "event.to_hash.keys.each { |k| 
                        if k.start_with?('checkpoint_') or k.start_with?('origin_')
                            event.remove(k) 
                        end
                        }
                        "
        }
    }    
}
