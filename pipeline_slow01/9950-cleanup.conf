# clean up all unwanted fields before sending it to aggregation
filter {
    if "processed" not in [tags] {
        #drop {}
        mutate {
            add_field => { "model_name" => "unknown" } # Set the Model Name                
            add_field => { "model_version" => "0.1.0" } # Set the Model Version
            remove_field => ["event_msg"]
        }
        if [host][name] {
            mutate {
                copy => { "[host][name]" => "host_name" }        
                remove_field => ["host"]    
            }
        }
    } else if [type] != "wineventlog" {
        mutate {
            # Remove Meta Fields
            remove_field => [ "host" , "received_from", "record_number", "version" , "@version", 
            "message" ]
            # Remove Syslog Fields
            remove_field => [ "syslog_hostname", "syslog_message" , "syslog_program" , "syslog_pid", "syslog_pri", "syslog_timestamp"]
            remove_field => [ "facility", "facility_label", "severity_label", "priority"]
            # Remove Winlogbeat Fields
            remove_field => [ "activity_id", "beat", "event_id" , "event_data", "keywords", "process_id", 
            "source_name" , "task", "thread_id" ]     
            remove_field => ["opcode", "log_name", "computer_name", "provider_guid", "level"]  
            # Remove Custom Interim Fields
            remove_field => [ "event_msg" , "preprocessed", "processed", "syslog_message", "message", "event_msg" ]
            # Update the Type as Unknown
            # update => { "type" => "unknown" }
        }               
    }
    if ![event_count] {
        ruby {
            code => "event.set('event_count',1)"
        }
    }
    # Clean up all IP address (if they're don't have the IP Structure)        
    if [client_ip] !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ {
        mutate { remove_field => ["client_ip"] }
    }
    if [destination_ip] !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ {
        mutate { remove_field => ["destination_ip"] }
    }
    if [domain_controller_ip] !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ {
        mutate { remove_field => ["domain_controller_ip"] }
    }
    if [dst_ip] !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ {
        mutate { remove_field => ["dst_ip"] }
    }
    if [src_ip] !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ {
        mutate { remove_field => ["src_ip"] }
    }
    if [event_data][IpAddress] !~ /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/ {
        mutate { remove_field => ["[event_data][IpAddress]"] }
    }
    # Clean up Ports if they're not integers
    #if [src_port] !~ /^[0-9]*$/ {
    #    mutate { remove_field => ["src_port"] }
    #}
    #if [src_port_number] !~ /^[0-9]*$/ {
    #    mutate { remove_field => ["src_port_number"] }
    #}
    #if [dst_port] !~ /^[0-9]*$/ {
    #    mutate { remove_field => ["dst_port"] }
    #}
    if [event_data][IpPort] !~ /^[0-9]*$/ {
        mutate { remove_field => ["[event_data][IpPort]"] }
    }
    
    # Set the Event Date
    # Set the Event Date
    if [event_ts] {
        ruby {     
          code => " begin
                        event.set('event_date',event.get('event_ts').time.strftime('%Y-%m-%d'))
                    rescue Exception => e
                        # event['ruby_exception'] = 'YOUR_FILTER_NAME: ' + e.message
                        print e.message
                    end
                  "
        } 
    } else if [event_ts_rx] {
        ruby {     
          code => " begin
                        event.set('event_date',event.get('event_ts_rx').time.strftime('%Y-%m-%d'));
                        event.set('event_ts',event.get('event_ts_rx'))
                    rescue Exception => e
                        #event['ruby_exception'] = 'YOUR_FILTER_NAME: ' + e.message
                        print e.message
                    end     
                  "
        } 
    } else {
       ruby {     
          code => " begin
                        event.set('event_date',event.get('@timestamp').time.strftime('%Y-%m-%d'));
                        event.set('event_ts_rx',event.get('@timestamp'));
                        event.set('event_ts',event.get('@timestamp'))
                   rescue Exception => e
                        #event['ruby_exception'] = 'YOUR_FILTER_NAME: ' + e.message
                        print e.message
                    end     
                   "
        } 
    }


    mutate {
	# Remove HTTP Headers, if the events were received via HTTP
        remove_field => ["headers"]
    }
}

